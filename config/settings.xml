<?xml version="1.0" encoding="UTF-8"?>

<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<!--
  | 这是 Maven 的配置文件。可以在两个级别上指定它：
  |
  |  1. 用户级别。此settings.xml文件为单个用户提供配置，通常以 ${user.home}/.m2/settings.xml 的形式提供。
  |                 注意：可以使用 CLI 选项覆盖此位置：-s /path/to/user/settings.xml
  |
  |  2. 全局级别。此settings.xml文件为计算机上的所有 Maven 用户提供配置（假设他们都使用相同的 Maven 安装）。
  |                 它通常在${maven.conf}/settings.xml。
  |                 注意：可以使用 CLI 选项覆盖此位置：-gs /path/to/global/settings.xml
  |
  | 此示例文件中的各个部分旨在为您提供一个良好的开端，以充分利用 Maven 安装。
  | 在适当的情况下，默认值提供了值（未指定设置时使用的值）。
  |
  |-->
<settings xmlns="http://maven.apache.org/SETTINGS/1.2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd">
  <!-- localRepository
    | 本地存储库 maven 将用于存储工件的路径。
    |
    | 默认: ${user.home}/.m2/repository
  <localRepository>/path/to/local/repo</localRepository>
  -->

  <!-- interactiveMode
    | 这将确定 maven 在需要输入时是否提示您。如果设置为 false，
    | Maven 将为相关参数使用合理的默认值，可能基于其他一些设置。
    |
    | 默认: true
  <interactiveMode>true</interactiveMode>
  -->

  <!-- offline
    | 确定 maven 在执行构建时是否应尝试连接到网络。这将对项目下载、项目部署等产生影响。
    |
    | 默认: false
  <offline>false</offline>
  -->

  <!-- pluginGroups
    | 这是一个附加组标识符的列表，在按其前缀解析插件时，即在调用类似“mvn prefix：goal”的命令行时，将搜索这些标识符。
    | Maven 将自动添加组标识符“org.apache.maven.plugins”和“org.codehaus.mojo”（如果这些尚未包含在列表中）。
    |-->
  <pluginGroups>
    <!-- pluginGroup
      | 指定用于插件查找的其他组标识符。
    <pluginGroup>com.your.plugins</pluginGroup>
    -->
  </pluginGroups>

  <!-- TODO 从什么时候开始可以选择如图所示的代理？ -->
  <!-- proxies
    | 这是可以在此计算机上用于连接到网络的代理列表。
    | 除非另有指定（通过系统属性或命令行开关），否则第一代理将使用此列表中标记为“活动”的规范。
    |-->
  <proxies>
    <!-- proxy
      | 一个代理的规范，用于连接到网络。
      |
    <proxy>
      <id>optional</id>
      <active>true</active>
      <protocol>http</protocol>
      <username>proxyuser</username>
      <password>proxypass</password>
      <host>proxy.host.net</host>
      <port>80</port>
      <nonProxyHosts>local.net|some.host.com</nonProxyHosts>
    </proxy>
    -->
  </proxies>

    <!-- servers 标签具有以下作用：
    | HIS 是身份验证配置文件的列表，由系统内使用的服务器 ID 进行键控。
    | 每当 maven 必须连接到远程服务器时，都可以使用身份验证配置文件。
    |-->
  <servers>
    <!-- server
      | 指定连接到特定服务器时要使用的身份验证信息，由系统中的唯一名称标识（由下面的“id”属性引用）。
      |
      | 注意：您应该指定用户名/密码或 privateKey/密码，因为这些配对一起使用。
      |
    <server>
      <id>deploymentRepo</id>
      <username>repouser</username>
      <password>repopwd</password>
    </server>
    -->

    <!-- 另一个示例，使用密钥进行身份验证。
    <server>
      <id>siteServer</id>
      <privateKey>/path/to/private/key</privateKey>
      <passphrase>optional; leave empty if not used.</passphrase>
    </server>
    -->

    <!-- 配置 `<servers>` 节点来指定仓库的认证信息，如阿里云校 Maven 仓库。-->
    <server>
      <id>2330291-release-Ikhm5V</id>
      <username>63e87861c30a398c5d2fb9f2</username>
      <password>fkl(OH4pCTT4</password>
    </server>
  </servers>

  <!-- mirrors 标签具有以下作用：
    | 这是用于从远程存储库下载依赖的镜像列表。
    | 它的工作原理是这样的：POM 可以声明一个存储库，用于解决某些工件。
    | 但是，此存储库有时可能会遇到流量大的问题，因此人们已将其镜像到多个地方。
    |
    | 该存储库定义将具有唯一的 ID，因此我们可以为此创建镜像引用存储库，用作备用下载站点。镜像站点将是首选该存储库的服务器。
    |-->
  <mirrors>
    <!-- mirror 标签具有以下作用：
      | 指定要使用的存储库镜像站点，而不是给定的存储库。
      | 此镜像服务的存储库具有与此镜像的 mirrorOf 元素匹配的 ID。
      | 使用 ID 用于继承和直接查找目的，并且在镜像集中必须是唯一的。
      |
    <mirror>
      <id>mirrorId</id>
      <mirrorOf>repositoryId</mirrorOf>
      <name>Human Readable Name for this Mirror.</name>
      <url>http://my.repository.com/repo/path</url>
    </mirror>
      -->

    <!-- Maven阿里云代理仓库，配置参考阿里云官网 https://developer.aliyun.com/mvn/guide -->
    <!-- Maven 仓库的主要分类包括本地仓库local、官方中央仓库central、代理仓库(阿里云等)、第三方仓库(私人、公司或社区机构自建仓库) -->
    <!-- 代理仓库作为一个中间层，代理对中央仓库（Central Repository）的请求。这意味着当你从阿里云Maven仓库请求一个依赖时，如果这个依赖不在阿里云仓库内，那么它会从中央仓库获取并缓存到阿里云仓库中，之后再提供给客户端 -->
    <!-- 你也可以在项目的 pom.xml 文件中配置 <mirrors>，但这种做法不太常见，通常推荐在全局的 settings.xml 文件中进行配置，以保持一致性 -->
    <!-- 通过这样的配置，Maven 会在构建项目时优先使用配置的镜像仓库来下载依赖，从而加快构建速度 -->
    <mirror>
      <!-- 唯一标识这个镜像配置，以便在其他地方引用 -->
      <id>aliyun</id>
      <!-- 指定这个镜像应该覆盖哪些仓库。可以是一个特定仓库的 ID，或者使用通配符 * 表示所有仓库 -->
      <!-- mirrorOf 的值为 central 意味着覆盖 Maven 的中央仓库 -->
      <mirrorOf>*</mirrorOf>
      <!-- 给镜像命名，方便识别 -->
      <name>阿里云公共仓库</name>
      <!-- 指定镜像仓库的实际 URL -->
      <url>https://maven.aliyun.com/repository/public</url>
    </mirror>

    <mirror>
      <id>maven-default-http-blocker</id>
      <mirrorOf>external:http:*</mirrorOf>
      <name>Pseudo repository to mirror external repositories initially using HTTP.</name>
      <url>http://0.0.0.0/</url>
      <blocked>true</blocked>
    </mirror>
  </mirrors>

  <!-- profiles 标签具有以下作用：
    | 这是一个配置文件列表，可以通过多种方式激活，并且可以修改
    | 生成过程。settings.xml中提供的配置文件旨在提供特定于本地计算机的路径和存储库位置，这些路径和位置允许生成在本地环境中运行。
    |
    | 例如，如果你有一个集成测试插件 - 如cactus - 需要知道你的 Tomcat 实例安装在哪里，
    | 您可以在此处提供一个变量，以便该变量为在构建过程中取消引用以配置 Cactus 插件。
    |
    | 如上所述，可以通过多种方式激活配置文件。一种方式 - activeProfiles 本文档的部分 （settings.xml） - 将在后面讨论。
    | 基本上是另一种方式依赖于对属性的检测，要么匹配属性的特定值，或者仅仅测试它的存在。
    | 配置文件也可以通过 JDK 版本前缀激活，其中在 JDK 版本“1.4.2_07”上执行构建时，值“1.4”可能会激活配置文件。
    | 最后，可以直接从命令行指定活动配置文件的列表。
    |
    | 注意：对于settings.xml中定义的配置文件，您只能指定依赖存储库、插件存储库和自由格式属性，以用作 POM 中插件的配置变量。
    |
    |-->
  <profiles>
    <!-- profile 标签具有以下作用：
      | 指定生成过程的一组介绍，这些介绍将使用上述一种或多种机制进行激活。
      | 出于继承目的，以及要通过<activatedProfiles/>命令行激活配置文件，配置文件必须具有唯一的 ID。
      |
      | 建议的配置文件标识最佳做法是使用一致的命名约定对于配置文件，
      | 例如 'env-dev'、'env-test'、'env-production'、'user-jdcasey'、'user-brett' 等。
      | 这将使理解引入的配置文件集正在尝试的内容更加直观完成，特别是当您只有用于调试的配置文件 ID 列表时。
      |
      | 此配置文件示例使用 JDK 版本触发激活，并提供特定于 JDK 的存储库。
    <profile>
      <id>jdk-1.4</id>

      <activation>
        <jdk>1.4</jdk>
      </activation>

      <repositories>
        <repository>
          <id>jdk14</id>
          <name>Repository for JDK 1.4 builds</name>
          <url>http://www.myhost.com/maven/jdk14</url>
          <layout>default</layout>
          <snapshotPolicy>always</snapshotPolicy>
        </repository>
      </repositories>
    </profile>
    -->

    <!-- 配置 Maven 全局 JDK, 这样我们在创建 Maven 项目时就会自动使用该 JDK 版本。此处默认使用 JDK-21 -->
    <!-- 配置 Maven 全局 JDK-1.8 候选项，默认不使用 -->
    <profile>
      <!-- 该配置的唯一标识符，便于指定激活。配置名称可以任取，例如也可以是：dev、prod、test 等等 -->
      <id>jdk-1.8</id>
      <!-- 指定激活该配置的条件 -->
      <activation>
        <!-- 基于 JDK 版本来激活 -->
        <jdk>1.8</jdk>
        <!-- 默认是否激活此配置 -->
        <activeByDefault>false</activeByDefault>
      </activation>
      <!-- 定义一系列的键值对，在构建过程中使用这些属性值 -->
      <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
      </properties>
      <!-- 该配置会出现在 Maven 项目的仓库列表中，格式为 aliyun https://maven.aliyun.com/repository/public -->
      <!-- 如果想使用其它代理仓库，可在<repositories></repositories>节点中加入对应的仓库使用地址。以使用 central 代理仓为例 -->
      <repositories>
        <!-- repository 用于存储和检索普通的 Maven 依赖构件 -->
        <repository>
          <id>aliyun</id>
          <name>阿里云公共 Maven 仓库</name>
          <url>https://maven.aliyun.com/repository/public</url>
          <releases>
            <enabled>true</enabled>
          </releases>
          <snapshots>
            <enabled>false</enabled>
          </snapshots>
        </repository>
        <!-- 还可以接着配置插件下载的仓库-->
      </repositories>
      <!-- pluginRepository 用于存储和检索 Maven 插件 -->
      <pluginRepositories>
        <pluginRepository>
          <id>aliyun</id>
          <name>阿里云公共 Maven 插件仓库</name>
          <url>https://maven.aliyun.com/repository/public</url>
          <releases>
            <enabled>true</enabled>
          </releases>
          <snapshots>
            <enabled>false</enabled>
          </snapshots>
        </pluginRepository>
      </pluginRepositories>
    </profile>
    <!-- JDK-21配置 -->
    <profile>
      <!-- 该配置的唯一标识符，便于指定激活。配置名称可以任取，例如也可以是：dev、prod、test 等等 -->
      <id>jdk-21</id>
      <!-- 指定激活该配置的条件 -->
      <activation>
        <!-- 基于 JDK 版本来激活 -->
        <jdk>21</jdk>
        <!-- 默认是否激活此配置 -->
        <activeByDefault>true</activeByDefault>
      </activation>
      <!-- 定义一系列的键值对，在构建过程中使用这些属性值 -->
      <properties>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
      </properties>
      <!-- 该配置会出现在 Maven 项目的仓库列表中，格式为 aliyun https://maven.aliyun.com/repository/public -->
      <!-- 如果想使用其它代理仓库，可在<repositories></repositories>节点中加入对应的仓库使用地址。以使用 central 代理仓为例 -->
      <repositories>
        <!-- repository 用于存储和检索普通的 Maven 依赖构件 -->
        <repository>
          <id>aliyun</id>
          <name>阿里云公共 Maven 仓库</name>
          <url>https://maven.aliyun.com/repository/public</url>
          <releases>
            <enabled>true</enabled>
          </releases>
          <snapshots>
            <enabled>false</enabled>
          </snapshots>
        </repository>
        <!-- 还可以接着配置插件下载的仓库，如阿里云校 Maven 私有仓库，配置参考云校官网 https://packages.aliyun.com/ -->
        <repository>
          <id>2330291-release-Ikhm5V</id>
          <url>https://packages.aliyun.com/maven/repository/2330291-release-Ikhm5V</url>
          <releases>
            <enabled>true</enabled>
          </releases>
          <snapshots>
            <enabled>false</enabled>
          </snapshots>
        </repository>
      </repositories>
      <!-- pluginRepository 用于存储和检索 Maven 插件 -->
      <pluginRepositories>
        <pluginRepository>
          <id>aliyun</id>
          <name>阿里云公共 Maven 插件仓库</name>
          <url>https://maven.aliyun.com/repository/public</url>
          <releases>
            <enabled>true</enabled>
          </releases>
          <snapshots>
            <enabled>false</enabled>
          </snapshots>
        </pluginRepository>
      </pluginRepositories>
    </profile>

    <!--
      | 这是另一个配置文件，由属性“target-env”激活，其值为“dev”，该配置文件提供 Tomcat 实例的特定路径。
      | 要使用此功能，您的插件配置可能会 假设如下所示：
      |
      | ...
      | <plugin>
      |   <groupId>org.myco.myplugins</groupId>
      |   <artifactId>myplugin</artifactId>
      |
      |   <configuration>
      |     <tomcatLocation>${tomcatPath}</tomcatLocation>
      |   </configuration>
      | </plugin>
      | ...
      |
      | 注意：如果您只是想在有人将“target-env”设置为任何内容时注入此配置，则可以省略<value/>激活属性的内部。
      |
    <profile>
      <id>env-dev</id>

      <activation>
        <property>
          <name>target-env</name>
          <value>dev</value>
        </property>
      </activation>

      <properties>
        <tomcatPath>/path/to/tomcat/instance</tomcatPath>
      </properties>
    </profile>
    -->
  </profiles>

  <!-- 在Maven配置中mirrors和profiles中的repositories两者定义的仓库的区别？
    `mirrors` 主要用于替代远程仓库，提高依赖下载的效率。一旦配置了镜像，Maven 会优先从镜像仓库下载依赖，而不是直接从原始仓库下载。
    `profiles` 中的 `repositories` 是为了在特定的构建配置下使用特定的仓库列表。这些配置只在相应的 `profile` 被激活时才会应用。
  -->

  <!-- activeProfiles
    | 对所有构建都处于活动状态的配置文件列表。
    |
    | 激活所使用的 profile 配置，但如果上面的 profile 通过 <activation> 规则自动激活，则无需添加下面的配置
  <activeProfiles>
    | 通过选中 profile 标签中的配置的唯一标识符 id 来激活配置
    <activeProfile>jdk-21</activeProfile>
    <activeProfile>alwaysActiveProfile</activeProfile>
    <activeProfile>anotherAlwaysActiveProfile</activeProfile>
  </activeProfiles>
  -->
</settings>

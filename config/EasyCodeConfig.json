{
  "author" : "龙茶清欢",
  "version" : "1.2.8",
  "userSecure" : "",
  "currTypeMapperGroupName" : "Default",
  "currTemplateGroupName" : "MybatisPlus",
  "currColumnConfigGroupName" : "Default",
  "currGlobalConfigGroupName" : "Default",
  "typeMapper" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "matchType" : "REGEX",
        "columnType" : "varchar(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "char(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|medium|long)*text",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "decimal(\\(\\d+,\\d+\\))?",
        "javaType" : "java.lang.Double"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "integer",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|small|medium)*int(\\(\\d+\\))?",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int4",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int8",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "REGEX",
        "columnType" : "bigint(\\(\\d+\\))?",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "date",
        "javaType" : "java.util.Date"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "datetime",
        "javaType" : "java.util.Date"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "timestamp",
        "javaType" : "java.util.Date"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "time",
        "javaType" : "java.time.LocalTime"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "boolean",
        "javaType" : "java.lang.Boolean"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "tinyint unsigned",
        "javaType" : "java.util.Boolean"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int unsigned",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "tinyint(1) unsigned zerofill",
        "javaType" : "java.util.Boolean"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "numeric(10,2)",
        "javaType" : "java.lang.String"
      } ]
    }
  },
  "template" : {
    "MybatisPlus-Mixed" : {
      "name" : "MybatisPlus-Mixed",
      "elementList" : [ {
        "name" : "controller.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Controller\")\n\n##保存文件（宏定义）\n#save(\"/controller\", \"Controller.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"controller\")\n\n##定义服务名\n#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \"Service\"))\n\n##定义实体对象名\n#set($entityName = $!tool.firstLowerCase($!tableInfo.name))\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.extension.api.ApiController;\nimport com.baomidou.mybatisplus.extension.api.R;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.annotation.Resource;\nimport java.io.Serializable;\nimport java.util.List;\n\n##表注释（宏定义）\n#tableComment(\"表控制层\")\n@RestController\n@RequestMapping(\"$!tool.firstLowerCase($!tableInfo.name)\")\npublic class $!{tableName} extends ApiController {\n    /**\n     * 服务对象\n     */\n    @Resource\n    private $!{tableInfo.name}Service $!{serviceName};\n\n    /**\n     * 分页查询所有数据\n     *\n     * @param page 分页对象\n     * @param $!entityName 查询实体\n     * @return 所有数据\n     */\n    @GetMapping\n    public R selectAll(Page<$!tableInfo.name> page, $!tableInfo.name $!entityName) {\n        return success(this.$!{serviceName}.page(page, new QueryWrapper<>($!entityName)));\n    }\n\n    /**\n     * 通过主键查询单条数据\n     *\n     * @param id 主键\n     * @return 单条数据\n     */\n    @GetMapping(\"{id}\")\n    public R selectOne(@PathVariable Serializable id) {\n        return success(this.$!{serviceName}.getById(id));\n    }\n\n    /**\n     * 新增数据\n     *\n     * @param $!entityName 实体对象\n     * @return 新增结果\n     */\n    @PostMapping\n    public R insert(@RequestBody $!tableInfo.name $!entityName) {\n        return success(this.$!{serviceName}.save($!entityName));\n    }\n\n    /**\n     * 修改数据\n     *\n     * @param $!entityName 实体对象\n     * @return 修改结果\n     */\n    @PutMapping\n    public R update(@RequestBody $!tableInfo.name $!entityName) {\n        return success(this.$!{serviceName}.updateById($!entityName));\n    }\n\n    /**\n     * 删除数据\n     *\n     * @param idList 主键结合\n     * @return 删除结果\n     */\n    @DeleteMapping\n    public R delete(@RequestParam(\"idList\") List<Long> idList) {\n        return success(this.$!{serviceName}.removeByIds(idList));\n    }\n}\n"
      }, {
        "name" : "dao.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Dao\")\n\n##保存文件（宏定义）\n#save(\"/dao\", \"Dao.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"dao\")\n\nimport java.util.List;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport org.apache.ibatis.annotations.Param;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n##表注释（宏定义）\n#tableComment(\"表数据库访问层\")\npublic interface $!{tableName} extends BaseMapper<$!tableInfo.name> {\n\n/**\n* 批量新增数据（MyBatis原生foreach方法）\n*\n* @param entities List<$!{tableInfo.name}> 实例对象列表\n* @return 影响行数\n*/\nint insertBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n\n/**\n* 批量新增或按主键更新数据（MyBatis原生foreach方法）\n*\n* @param entities List<$!{tableInfo.name}> 实例对象列表\n* @return 影响行数\n* @throws org.springframework.jdbc.BadSqlGrammarException 入参是空List的时候会抛SQL语句错误的异常，请自行校验入参\n*/\nint insertOrUpdateBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n\n}\n"
      }, {
        "name" : "entity.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##保存文件（宏定义）\n#save(\"/entity\", \".java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"entity\")\n\n##自动导入包（全局变量）\n$!autoImport\nimport com.baomidou.mybatisplus.extension.activerecord.Model;\nimport java.io.Serializable;\n\n##表注释（宏定义）\n#tableComment(\"表实体类\")\n@SuppressWarnings(\"serial\")\npublic class $!{tableInfo.name} extends Model<$!{tableInfo.name}> {\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})//${column.comment}#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n#getSetMethod($column)\n#end\n\n#foreach($column in $tableInfo.pkColumn)\n    /**\n     * 获取主键值\n     *\n     * @return 主键值\n     */\n    @Override\n    protected Serializable pkVal() {\n        return this.$!column.name;\n    }\n    #break\n#end\n}\n"
      }, {
        "name" : "mapper.xml.vm",
        "code" : "##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Dao.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao\">\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\" id=\"$!{tableInfo.name}Map\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n\n    <!-- 批量插入 -->\n    <insert id=\"insertBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.parent.name}.$!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n        (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n    </insert>\n    <!-- 批量插入或按主键更新 -->\n    <insert id=\"insertOrUpdateBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.parent.name}.$!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n            (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n        on duplicate key update\n         #foreach($column in $tableInfo.otherColumn)$!column.obj.name = values($!column.obj.name) #if($velocityHasNext), #end#end\n    </insert>\n\n</mapper>\n"
      }, {
        "name" : "service.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Service\")\n\n##保存文件（宏定义）\n#save(\"/service\", \"Service.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service\")\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n##表注释（宏定义）\n#tableComment(\"表服务接口\")\npublic interface $!{tableName} extends IService<$!tableInfo.name> {\n\n}\n"
      }, {
        "name" : "serviceImpl.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"ServiceImpl\")\n\n##保存文件（宏定义）\n#save(\"/service/impl\", \"ServiceImpl.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service.impl\")\n\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.stereotype.Service;\n\n##表注释（宏定义）\n#tableComment(\"表服务实现类\")\n@Service(\"$!tool.firstLowerCase($tableInfo.name)Service\")\npublic class $!{tableName} extends ServiceImpl<$!{tableInfo.name}Dao, $!{tableInfo.name}> implements $!{tableInfo.name}Service {\n\n}\n"
      } ]
    },
    "MybatisPlus" : {
      "name" : "MybatisPlus",
      "elementList" : [ {
        "name" : "application.yaml.vm",
        "code" : "##设置保存名称与保存位置\n$!callback.setFileName(\"application.yaml\")\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources\"))\n# 配置配置应用的常规、非敏感、不变动的属性\n# 运行端口\nserver:\n  port: 8888\nspring:\n  # 应用名称\n  application:\n    name: @project.artifactId@\n  datasource:\n    # 数据库连接 URL\n    url: jdbc:mysql://192.168.56.10:3306/blog_cloud?useUnicode=true&characterEncoding=UTF-8&allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=GMT%2B8\n    # 数据库用户名\n    username: lcqh\n    # 数据库密码\n    password: 479368\n    # 数据库驱动类名\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    # 显式指定数据源类型为 HikariDataSource\n    type: com.zaxxer.hikari.HikariDataSource\n    # HikariCP 是一个高性能的 JDBC 连接池实现，它通常用于提高应用程序的性能和响应速度\n    hikari:\n      # 连接池中最小空闲连接数\n      minimum-idle: 5\n      # 连接池中最大连接数\n      maximum-pool-size: 10\n      # 连接闲置超时时间（毫秒）\n      idle-timeout: 600000\n      # 获取连接的超时时间（毫秒）\n      connection-timeout: 30000\n  # Redis 配置\n  data:\n    redis:\n      # Redis 连接 URL。覆盖主机、端口、用户名和密码。示例： redis://username:password@host:port/db-number\n      # redis://: 协议头，指明使用 Redis 协议。\n      # username:password@ (可选): 用户名和密码，用于认证。\n      # host: Redis 服务器的主机名或 IP 地址。\n      # port: Redis 服务器监听的端口号，默认为 6379。\n      # db-number (可选): 指定连接到哪个数据库。Redis 支持 16 个数据库，默认为 0。\n      url: redis://192.168.56.10:6379/1\n      # Redis 服务器的密码，如果没有设置密码，则设置为 null\n      password: 479368\n      # 命令执行的超时时间（单位：秒）\n      timeout: 5s\n      # Redis 客户端连接超时时间（单位：秒）\n      connect-timeout: 5s\n      # Lettuce 是 Redis 的异步客户端，它提供了高性能的非阻塞 I/O 操作。默认使用 Lettuce 作为 Redis 客户端\n    # 缓存配置, 使用 Redis 作为缓存。启用缓存配置还需要加上 @EnableCaching 注解\n  cache:\n    type: redis\n    # Redis 缓存策略\n    redis:\n      # 允许缓存 null 值。解决缓存穿透问题\n      cache-null-values: true\n      # 缓存过期时间，默认情况下，缓存永不过期。单位：秒\n      time-to-live: 3600s\n      # 缓存写入 Redis 时是否使用 prefix 作为 key 前缀\n      use-key-prefix: true\n      # 缓存 key 的前缀 prefix\n      key-prefix: \"redis:cache:\"\n  # 时间日期格式化配置\n  jackson:\n    time-zone: GMT+8\n    date-format: yyyy-MM-dd HH:mm:ss\n  # 开启虚拟线程功能\n  threads:\n    virtual:\n      enabled: true  \n# mybatis-plus 配置\nmybatis-plus:\n  # 指定 Mapper 对应的 XML 文件扫描位置\n  mapper-locations: classpath*:/mapper/**/*.xml\n  # 全局配置\n  global-config:\n    # 关闭 mybatis-plus 横幅打印\n    banner: false\n    # 逻辑删除配置\n    db-config:\n      # 表名前缀\n      table_prefix: t_\n      # 表主键生成策略，ASSIGN_ID 自动分配 ID，适用于 Long、Integer、String 类型的主键。默认使用雪花算法通过 IdentifierGenerator 的 nextId 实现\n      id-type: ASSIGN_ID\n      # 全局逻辑删除的实体字段名\n      logic-delete-field: deleted\n      # 逻辑已删除值(默认为 1) 也可设置为 true\n      logic-delete-value: 1\n      # 逻辑未删除值(默认为 0) 也可设置为 false\n      logic-not-delete-value: 0\n  # MyBatis 配置\n  configuration:\n    # 启用 sql 打印，生产环境建议关闭\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n\n# 配置 actuator 对外指标\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"*\"\n  endpoint:\n    prometheus:\n      enabled: true\n    health:\n      show-details: always\n  # 配置 Prometheus 监控\n  prometheus:\n    metrics:\n      export:\n        enabled: true\n  # 这个应用所有上报的 metrics 都会带上 application 这个标签的值，用于区分不同应用\n  metrics:\n    tags:\n      application: ${spring.application.name}\n\n# 然后可以通过访问 http://localhost:8081/actuator 获取应用指标信息\n# 然后可以通过访问 http://localhost:8081/actuator/prometheus 获取Prometheus格式的指标数据"
      }, {
        "name" : "entity.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##保存文件（宏定义）\n#save(\"/entity\", \".java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"entity\")\n\n##自动导入包（全局变量）\n### $!{autoImport.vm}\nimport com.baomidou.mybatisplus.annotation.*;\nimport io.swagger.v3.oas.annotations.media.Schema;\n\nimport java.io.Serializable;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n##表注释（宏定义）\n#tableComment(\"表实体类\")\n@Getter\n@Setter\n@TableName(\"$tableInfo.obj.name\")\n@Schema(name = \"$!{tableInfo.comment}实体\", description = \"$!{tableInfo.comment}映射\")\npublic class $!{tableInfo.name} implements Serializable {\n    @Serial\n    private static final long serialVersionUID = $!tool.serial();\n#foreach($column in $tableInfo.pkColumn)\n\n    @Schema(description = \"$!{column.obj.comment}\")\n    @TableId(value = \"$!{column.obj.name}\" , type = IdType.ASSIGN_ID)\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n#foreach($column in $tableInfo.otherColumn)\n    @Schema(description = \"$!{column.obj.comment}\")\n#if(!($column.obj.name.equals('deleted')||$column.obj.name.equals('del_flag')||$column.obj.name.equals('update_time')||$column.obj.name.equals('create_time')))\n    @TableField(value = \"$!{column.obj.name}\")\n#end\n#if($column.obj.name.equals('create_time'))\n\t@TableField(value = \"$!{column.obj.name}\" , fill = FieldFill.INSERT)\n#end\n#if($column.obj.name.equals('update_time'))\n\t@TableField(value = \"$!{column.obj.name}\" , fill = FieldFill.INSERT_UPDATE)\n#end\n#if(($column.obj.name.equals('deleted')||$column.obj.name.equals('del_flag')))\n\t@TableLogic\n#end\t\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n    \n#end\n}\n\n// MyBatisPlus 注解的用法及属性使用参考官网 https://baomidou.com/reference/annotation/"
      }, {
        "name" : "controller.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Controller\")\n\n##保存文件（宏定义）\n#save(\"/controller\", \"Controller.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"controller\")\n\n##定义服务名\n#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \"Service\"))\n##定义实体对象名\n#set($entityName = $!tool.firstLowerCase($!tableInfo.name))\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport $!{tableInfo.savePackageName}.utils.R;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.web.bind.annotation.*;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\n\nimport java.util.List;\n\n##表注释（宏定义）\n#tableComment(\"表控制层\")\n@RestController\n@RequestMapping(\"/$!tool.firstLowerCase($!tableInfo.name)\")\n@RequiredArgsConstructor\n@Tag(name = \"$!{tableInfo.comment}管理\", description = \"$!{tableInfo.comment}管理\")\npublic class $!{tableName} {\n\n    private final $!{tableInfo.name}Service $!{serviceName};\n\n    /**\n     * 查询\n     * PathVariable 从URL路径中获取参数\n     * URL 形式：/findById/123\n     */\n    @GetMapping(\"/findById/{id}\")\n    @Operation(summary = \"查询\")\n    public R<Object> findById(@PathVariable Long id) {\n        return R.ok($!{serviceName}.getById(id));\n    }\n\n    /**\n     * 新增\n     *\n     * @param $!entityName 实体对象\n     * @return 新增结果\n     */\n    @PostMapping(\"/insert\")\n    @Operation(summary = \"新增\")\n    public R<Object> insert(@RequestBody $!tableInfo.name $!entityName) {\n        return R.ok($!{serviceName}.save($!entityName));\n    }\n\n    /**\n     * 修改\n     *\n     * @param $!entityName 实体对象\n     * @return 修改结果\n     */\n    @PutMapping(\"/update\")\n    @Operation(summary = \"修改\")\n    public R<Object> update(@RequestBody $!tableInfo.name $!entityName) {\n        return R.ok($!{serviceName}.updateById($!entityName));\n    }\n\n    /**\n     * 删除\n     * RequestParam 从URL的查询字符串中获取参数\n     * URL 形式：/user/delete?idList=1,2,3\n     */\n    @DeleteMapping(\"/delete\")\n    @Operation(summary = \"删除\")\n    public R<Object> delete(@RequestParam(\"idList\") List<Long> idList) {\n        return R.ok($!{serviceName}.removeByIds(idList));\n    }\n    \n    /**\n     * 分页查询\n     * GetMapping 可以直接接收 URL 查询字符串中的参数。不使用 @RequestParam 等注解。\n     * 分页参数（如 page 和 size）和过滤条件（如 username 和 age）都可以通过 URL 查询字符串传递。\n     * Spring MVC 会自动将这些参数映射到相应的对象上。\n     */\n    @GetMapping(\"/findByPage\")\n    @Operation(summary = \"分页查询\")\n    public R<Object> findByPage(Page<$!{tableInfo.name}> page, $!tableInfo.name $!entityName) {\n        return R.ok($!{serviceName}.page(page, new QueryWrapper<>($!entityName)));\n    }\n\n}\n// 关于 Servlet Web 应用程序的开发配置参考 Spring 官方文档： https://docs.spring.io/spring-framework/reference/web.html\n// 关于 Servlet Web 应用程序的开发配置参考 SpringBoot 官方文档： https://docs.spring.io/spring-boot/reference/web/servlet.html\n\n// 关于 Reactive Web 应用程序的开发配置参考 SpringBoot 官方文档： https://docs.spring.io/spring-framework/reference/web-reactive.html\n// 关于 Reactive Web 应用程序的开发配置参考 SpringBoot 官方文档： https://docs.spring.io/spring-boot/reference/web/reactive.html"
      }, {
        "name" : "service.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Service\")\n\n##保存文件（宏定义）\n#save(\"/service\", \"Service.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service\")\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n##表注释（宏定义）\n#tableComment(\"表服务接口\")\npublic interface $!{tableName} extends IService<$!tableInfo.name> {\n    /**\n     * IService 是 MyBatis-Plus 提供的一个通用 Service 层接口，它封装了常见的 CRUD 操作，\n     * 包括插入、删除、查询和分页等。通过继承 IService 接口，可以快速实现对数据库的基本操作，同时保持代码的简洁性和可维护性。\n     * 使用参考 Mybatis-Plus 官网： https://baomidou.com/guides/data-interface/\n     */\n   \n}\n"
      }, {
        "name" : "serviceImpl.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"ServiceImpl\")\n\n##保存文件（宏定义）\n#save(\"/service/impl\", \"ServiceImpl.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service.impl\")\n\nimport $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.stereotype.Service;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n\n##表注释（宏定义）\n#tableComment(\"表服务实现类\")\n@Service(\"$!tool.firstLowerCase($tableInfo.name)Service\")\npublic class $!{tableName} extends ServiceImpl<$!{tableInfo.name}Mapper, $!{tableInfo.name}> implements $!{tableInfo.name}Service {\n    /**\n     * MyBatis-Plus 提供了一套强大的条件构造器（Wrapper），用于构建复杂的数据库查询条件。\n     * Wrapper 类允许开发者以链式调用的方式构造查询条件，无需编写繁琐的 SQL 语句，从而提高开发效率并减少 SQL 注入的风险。\n     * 使用参考 Mybatis-Plus 官网： https://baomidou.com/guides/wrapper/\n     */\n     \n     \n    /**\n     * MyBatis-Plus 从 3.5.4 版本开始支持流式查询，这是 MyBatis 的原生功能，\n     * 通过 ResultHandler 接口实现结果集的流式查询。这种查询方式适用于数据跑批或处理大数据的业务场景。\n     * 使用参考 Mybatis-Plus 官网： https://baomidou.com/guides/stream-query/\n     */\n     \n     \n}\n"
      }, {
        "name" : "mapper.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Mapper\")\n\n##保存文件（宏定义）\n#save(\"/mapper\", \"Mapper.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"mapper\")\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n##表注释（宏定义）\n#tableComment(\"表数据库访问层\")\npublic interface $!{tableName} extends BaseMapper<$!tableInfo.name> {\n\n}\n"
      }, {
        "name" : "mapper.xml.vm",
        "code" : "##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Mapper.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper\">\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\" id=\"$!{tableInfo.name}Map\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n\n    <!--查询单个-->\n    <select id=\"queryById\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        where $!pk.obj.name = #{$!pk.name}\n    </select>\n\n    <!--查询指定行数据-->\n    <select id=\"queryAllByLimit\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        <where>\n#foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n#end\n        </where>\n        limit #{pageable.offset}, #{pageable.pageSize}\n    </select>\n\n    <!--统计总行数-->\n    <select id=\"count\" resultType=\"java.lang.Long\">\n        select count(1)\n        from $!tableInfo.obj.name\n        <where>\n#foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n#end\n        </where>\n    </select>\n\n    <!--新增所有列-->\n    <insert id=\"insert\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values (#foreach($column in $tableInfo.otherColumn)#{$!{column.name}}#if($velocityHasNext), #end#end)\n    </insert>\n\n    <insert id=\"insertBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n        (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n    </insert>\n\n    <insert id=\"insertOrUpdateBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n            (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n        on duplicate key update\n        #foreach($column in $tableInfo.otherColumn)$!column.obj.name = values($!column.obj.name)#if($velocityHasNext),\n        #end#end\n\n    </insert>\n\n    <!--通过主键修改数据-->\n    <update id=\"update\">\n        update $!{tableInfo.obj.name}\n        <set>\n#foreach($column in $tableInfo.otherColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                $!column.obj.name = #{$!column.name},\n            </if>\n#end\n        </set>\n        where $!pk.obj.name = #{$!pk.name}\n    </update>\n\n    <!--通过主键删除-->\n    <delete id=\"deleteById\">\n        delete from $!{tableInfo.obj.name} where $!pk.obj.name = #{$!pk.name}\n    </delete>\n\n</mapper>\n"
      }, {
        "name" : "mybatis.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/config\", \"MybatisPlusConfig.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"config\")\n\nimport com.baomidou.mybatisplus.annotation.DbType;\nimport com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;\nimport com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n##类文件注释（在 define.vm 中自定义的宏）\n#classComment(\"MyBatis-Plus 拦截器\") \n@Configuration\n@MapperScan(\"$!{tableInfo.savePackageName}.mapper\")\npublic class MybatisPlusConfig {\n\n    /**\n     * 新版分页插件设置，可根据需求选择添加\n     * 配置参考 Mybatis-Plus 官网： https://baomidou.com/plugins/\n     */\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor() {\n        // 插件主体，封装其他场景插件\n        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();\n        // 自动分页插件，以 MYSQL 为数据库\n        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));\n        // 添加非法SQL拦截器\n        interceptor.addInnerInterceptor(new IllegalSQLInnerInterceptor());\n        // 防止全表更新与删除插件\n        interceptor.addInnerInterceptor(new BlockAttackInnerInterceptor());\n        return interceptor;\n    }\n    \n}\n\n// 关于 Servlet Web 应用程序的关系型数据库相关开发配置参考 Spring 官方文档： https://docs.spring.io/spring-framework/reference/data-access.html\n// 关于 Servlet Web 应用程序的非关系型数据库相关开发配置参考 SpringBoot 官方文档： https://docs.spring.io/spring-boot/reference/data/nosql.html\n\n"
      }, {
        "name" : "MybatisMetaObjectHandler.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/handler\",\"MybatisMetaObjectHandler.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"handler\")\n\nimport com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.ibatis.reflection.MetaObject;\nimport org.springframework.stereotype.Component;\n\nimport java.time.LocalDateTime;\n\n##类文件注释（在 define.vm 中自定义的宏）\n#classComment(\"MyBatis-Plus 处理器\")  \n@Slf4j\n@Component\npublic class MybatisPlusMetaObjectHandler implements MetaObjectHandler {\n \n    /**\n     * 插入时的填充策略\n     * 配置参考 Mybatis-Plus 官方： https://baomidou.com/guides/auto-fill-field/\n     */\n    @Override\n    public void insertFill(MetaObject metaObject) {\n        log.info(\"开始插入填充...\");\n        this.strictInsertFill(metaObject, \"createTime\", LocalDateTime.class, LocalDateTime.now());\n        this.strictUpdateFill(metaObject, \"updateTime\", LocalDateTime.class, LocalDateTime.now());\n    }\n\n    /**\n     * 更新时的填充策略\n     */\n    @Override\n    public void updateFill(MetaObject metaObject) {\n        log.info(\"开始更新填充...\");\n        this.strictUpdateFill(metaObject, \"updateTime\", LocalDateTime.class, LocalDateTime.now());\n    }\n    \n} "
      }, {
        "name" : "ExceptionHandler.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/handler\", \"GlobalExceptionHandler.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"handler\")\n\nimport org.springframework.validation.FieldError;\nimport org.springframework.web.bind.MethodArgumentNotValidException;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n##类文件注释（在 define.vm 中自定义的宏）\n#classComment(\"controller层的专属异常处理器\")  \n@RestControllerAdvice(basePackages = \"com.blog.cloud.*.controller\")\npublic class GlobalExceptionHandler {\n\n    /**\n     * 数据校验异常处理\n     */\n    @ExceptionHandler(value = MethodArgumentNotValidException.class)\n    public R<Object> exceptionHandler(MethodArgumentNotValidException e) {\n        List<FieldError> fieldErrors = e.getBindingResult().getFieldErrors();\n        Map<String, Object> map = new HashMap<>();\n        fieldErrors.forEach(fieldError -> {\n            map.put(fieldError.getField(), fieldError.getDefaultMessage());\n        });\n        return R.failed(map);\n    }\n\n    /**\n     * BlogException异常处理\n     */\n    @ExceptionHandler(value = BlogException.class)\n    public R<Object> exceptionHandler(BlogException e) {\n        return R.failed(e.getMessage());\n    }\n\n    /**\n     * 其余异常处理\n     */\n    @ExceptionHandler(value = Exception.class)\n    public R<Object> exceptionHandler(Exception e) {\n        return R.failed(e.getMessage());\n    }\n    \n}\n"
      }, {
        "name" : "cors.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/config\", \"CorsConfig.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"config\")\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n##类文件注释（在 define.vm 中自定义的宏）\n#classComment(\"Servlet环境下跨域配置\")  \n@Configuration\npublic class CorsConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        // 设置允许跨域的路径\n        registry.addMapping(\"/**\")\n                // 设置允许携带cookie\n                // .allowCredentials(true)\n                // 设置允许的域名\n                .allowedOrigins(\"*\")\n                // 设置允许跨域的方法\n                .allowedMethods(\"*\")\n                // 设置允许的header属性\n                .allowedHeaders(\"*\")\n                // 设置允许的最大跨域时间\n                .maxAge(5000);\n    }\n    \n}\n\n// 笔记：  此处为springboot配置了全局跨域，同时我们也有必要为springsecurity设置允许跨域，及为HttpSecurity对象设置cors\n"
      }, {
        "name" : "redis.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/config\", \"RedisConfig.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"config\")\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.RedisSerializer;\nimport org.springframework.cache.annotation.EnableCaching;\n\n##类文件注释（在 define.vm 中自定义的宏）\n#classComment(\"Redis配置\")  \n@EnableCaching\n@Configuration\n@EnableConfigurationProperties(CacheProperties.class)\npublic class RedisConfig {\n\n    // 默认配置参考 RedisAutoConfiguration 自动配置类\n    // Redis 缓存对象内容的序列化不使用 RedisTemplate 的配置，需要在 RedisCacheManager 中单独配置，否则缓存 Cache 对象内容值会乱码\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(factory);\n        redisTemplate.setDefaultSerializer(RedisSerializer.string());\n        redisTemplate.setKeySerializer(RedisSerializer.string());\n        redisTemplate.setHashKeySerializer(RedisSerializer.string());\n        redisTemplate.setValueSerializer(RedisSerializer.json());\n        redisTemplate.setHashValueSerializer(RedisSerializer.json());\n        return redisTemplate;\n    }\n\n    // 不要将所有缓存统统放在一个 Redis 数据库中，我们可以将应用 Cache 缓存单独存放在一个 Redis 数据库中，然后将短信验证码单独放在一个 Redis 数据库中。避免混乱\n    // Redis 缓存对象内容的序列化不使用 RedisTemplate 的配置，需要在 RedisCacheManager 中使用 serializeValuesWith 单独配置，否则缓存 Cache 对象内容值会乱码\n    // 此处以 Java 代码的方式配置了 RedisCacheManager，也可以使用 Spring Boot 的配置文件配置。但两者不是互补的，此处配置了，配置文件中的redis缓存就失效了\n    // 使用应用配置文件存在的不足在于 Cache 缓存对象内容值经过序列化之后存储在 Redis 中会乱码，需要如下使用 serializeValuesWith 方法指定序列化方式。\n    @Bean\n    public CacheManager cacheManager(RedisConnectionFactory factory, CacheProperties cacheProperties) {\n        // 创建Redis缓存自定义配置，只对Cache缓存对象有效，对于RedisTemplate无效\n        RedisCacheConfiguration config = RedisCacheConfiguration\n                // 默认配置中，缓存对象 Cache 的内容序列化采用了 RedisSerializer.java 下面改为 RedisSerializer.json()\n                .defaultCacheConfig()\n                // Cache缓存的值序列化方式，此处采用 json\n                .serializeValuesWith(\n                        RedisSerializationContext\n                                .SerializationPair\n                                .fromSerializer(RedisSerializer.json()))\n                // Cache缓存的名称统一前缀，建议搞个常量类，不要写死在代码里\n                .prefixCacheNameWith(cacheProperties.getRedis().getKeyPrefix())\n                // Cache缓存的统一过期时间，同理\n                .entryTtl(cacheProperties.getRedis().getTimeToLive());\n\n        return RedisCacheManager.builder(factory)\n                .cacheDefaults(config)\n                .build();\n    }\n    \n    /**\n     * Redisson 配置\n     * Redisson 配置参考官网： https://github.com/redisson/redisson/blob/master/redisson-spring-boot-starter/README.md\n     */\n    // 既然使用了 Redisson 客户端，那么在使用 Redis 操作数据的时候，用 RedissonClient 替代 RedisTemplate 即可。\n    // Redisson 是一个高性能的 Java 客户端，用于与 Redis 服务器交互。它不仅提供了一个简单的 Redis 客户端接口，\n    // 而且还提供了一系列高级功能，使开发人员能够轻松地构建分布式应用程序。\n    @Bean(destroyMethod = \"shutdown\")\n    public RedissonClient redissonClient(RedisProperties properties) {\n        // 不配置 Config 则默认连接 127.0.0.1:6379\n        Config config = new Config();\n        // 使用单例服务模式\n        config.useSingleServer()\n                .setAddress(properties.getUrl())\n                .setPassword(properties.getPassword());\n        // 创建 Redisson 客户端\n        return Redisson.create(config);\n    }\n    \n}\n\n// springboot 中使用 redis 缓存注解参考官网 https://java.cunzaima.cn/spring-boot_docs_3.2.3-zh-all/io.html#io\n// 一个 Cache 缓存的键的组成格式为 prefix + cacheName + key 三部分组成，其中 prefix 为缓存键的前缀，cacheName 就是 @CacheConfig 中配置的 cacheNames，key 就是方法参数或者方法返回值。\n// 例如：@Cacheable(cacheNames = \"userCache\", key = \"#userId\")，则最终的缓存键为：userCache:12345\n\n// 关于 Cache 缓存的开发配置参考 Spring 官方文档： https://docs.spring.io/spring-framework/reference/integration/cache.html\n// 关于 Cache 缓存的开发配置参考 SpringBoot 官方文档： https://docs.spring.io/spring-boot/reference/io/caching.html\n\n// 一个缓存对象在Redis中存储的名称格式是： 前缀 + CacheName:key\n// 假如：前缀为 blog_\t  CacheName为 userCache \t key为 12345\t  则最终在Redis中存储的名称为： blog_userCache:12345\n\n// 注册 RedisCacheManager 组件相当于配置spring.cache.type=redis\t两者只可选其一。不要同时配置，避免造成不必要的冲突。如果同时配置了，会使用自定义的配置。\n// 配置了spring.cache.type=redis，Spring Boot会自动创建一个默认的RedisCacheManager bean，并将其用作默认的缓存管理器。"
      }, {
        "name" : "R.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/util\", \"R.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"util\")\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.experimental.Accessors;\nimport $!{tableInfo.savePackageName}.enums.HttpCode;\n\nimport java.io.Serializable;\n\n##类文件注释（在 define.vm 中自定义的宏）\n#classComment(\"统一返回的请求响应对象R\")   \n@Getter\n@Setter\n@Accessors(chain = true)\npublic class R<T> implements Serializable {\n    @Serial\n    private static final long serialVersionUID= $!tool.serial();\n\n    private int code;\n\tprivate String msg;\n\tprivate T data;\n\n    public static <T> R<T> ok() {\n\t\treturn restResult(null, HttpCode.OK.getCode(), HttpCode.OK.getMsg());\n\t}\n\n\tpublic static <T> R<T> ok(T data) {\n\t\treturn restResult(data, HttpCode.OK.getCode(), HttpCode.OK.getMsg());\n\t}\n\n\tpublic static <T> R<T> ok(String msg) {\n\t\treturn restResult(null, HttpCode.OK.getCode(), msg);\n\t}\n\n\tpublic static <T> R<T> ok(T data, String msg) {\n\t\treturn restResult(data, HttpCode.OK.getCode(), msg);\n\t}\n\n\tpublic static <T> R<T> failed() {\n\t\treturn restResult(null, HttpCode.NOT_FOUND.getCode(), HttpCode.NOT_FOUND.getMsg());\n\t}\n\n\tpublic static <T> R<T> failed(String msg) {\n\t\treturn restResult(null, HttpCode.NOT_FOUND.getCode(), msg);\n\t}\n\n\tpublic static <T> R<T> failed(T data) {\n\t\treturn restResult(data, HttpCode.NOT_FOUND.getCode(), HttpCode.NOT_FOUND.getMsg());\n\t}\n\n\tpublic static <T> R<T> failed(T data, String msg) {\n\t\treturn restResult(data, HttpCode.NOT_FOUND.getCode(), msg);\n\t}\n\n\tpublic static <T> R<T> failed(T data, int code, String msg) {\n\t\treturn restResult(data, code, msg);\n\t}\n\n\tpublic static <T> R<T> restResult(T data, int code, String msg) {\n\t\tR<T> response = new R<>();\n\t\tresponse.setData(data);\n\t\tresponse.setCode(code);\n\t\tresponse.setMsg(msg);\n\t\treturn response;\n\t}\n\t\n}\n\n// @Accessors(chain = true)  允许链式赋值\n"
      }, {
        "name" : "HttpCode.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/enums\", \"HttpCode.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"enums\")\n\nimport lombok.Getter;\nimport lombok.RequiredArgsConstructor;\n\n##类文件注释（在 define.vm 中自定义的宏）\n#classComment(\"请求响应对象R的状态吗\")    \n@Getter\n@RequiredArgsConstructor\npublic enum HttpCode {\n\n    OK(200, \"请求正常处理完毕\"),\n    BAD_REQUEST(400, \"错误的请求\"),\n    UNAUTHORIZED(401, \"请求要求身份验证\"),\n    FORBIDDEN(403, \"服务器拒绝请求\"),\n    NOT_FOUND(404, \"服务器找不到请求的网页\"),\n    METHOD_NOT_ALLOWED(405, \"禁用请求中指定的方法\"),\n    REQUEST_TIMEOUT(408, \"服务器等候请求时发生超时\"),\n    GONE(410, \"请求的资源已永久删除\"),\n    PAYLOAD_TOO_LARGE(413, \"请求实体过大\"),\n    URI_TOO_LONG(414, \"请求的 URI 过长\"),\n    TOO_MANY_REQUESTS(429, \"请求太多\"),\n    INTERNAL_SERVER_ERROR(500, \"服务器内部错误\"),\n    BAD_GATEWAY(502, \"错误网关\"),\n    SERVICE_UNAVAILABLE(503, \"服务不可用\"),\n    GATEWAY_TIMEOUT(504, \"网关超时\");\n\n    /**\n     * 响应状态码\n     */\n    private final int code;\n\n    /**\n     * 响应信息\n     */\n    private final String msg;\n    \n}\n"
      }, {
        "name" : "BeanCopyUtil.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/util\", \"BeanCopyUtil.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"util\")\n\nimport lombok.SneakyThrows;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.util.Assert;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n##类文件注释（在 define.vm 中自定义的宏）\n#classComment(\"Bean复制工具类\")    \npublic class BeanCopyUtil {\n\n    @SneakyThrows\n    public static <K, V> V singleCopy(K source, Class<V> target) {\n        Assert.notNull(source, \"source不能为空\");\n        Assert.notNull(target, \"target不能为空\");\n        V instance = target.getDeclaredConstructor().newInstance();\n        BeanUtils.copyProperties(source, instance);\n        return instance;\n    }\n\n    @SneakyThrows\n    public static <K, V> List<V> listCopy(List<K> source, Class<V> target) {\n        Assert.noNullElements(source, \"source不能为空,且元素也不能为空\");\n        Assert.notNull(target, \"target不能为空\");\n        List<V> targetList = new ArrayList<>();\n        source.forEach(item -> {\n            V instance;\n            try {\n                instance = target.getDeclaredConstructor().newInstance();\n                BeanUtils.copyProperties(item, instance);\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n            targetList.add(instance);\n        });\n        return targetList;\n    }\n    \n}\n\n// Bean复制时必须保证source和target中对应的需要复制的字段数据类型和名称都一致\n"
      }, {
        "name" : "RandomUtil.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/utils\", \"RandomUtil.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"utils\")\n\nimport java.util.Random;\n\n##类文件注释（在 define.vm 中自定义的宏）\n#classComment(\"短信验证码生成\")    \npublic class RandomUtil {\n\n    private static final Random random = new Random();\n\n    public static String generalFourRandom() {\n        StringBuilder four = new StringBuilder(4);\n        for (int i = 0; i < 4; i++) {\n            String number = String.valueOf(random.nextInt(10));\n            four.append(number);\n        }\n        return four.toString();\n    }\n\n    public static String generalSixRandom() {\n        StringBuilder six = new StringBuilder(6);\n        for (int i = 0; i < 6; i++) {\n            String number = String.valueOf(random.nextInt(10));\n            six.append(number);\n        }\n        return six.toString();\n    }\n\n}\n"
      }, {
        "name" : "security.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/config\", \"SecurityConfig.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"config\")\n\nimport com.blog.learn.filter.JwtAuthenticationTokenFilter;\nimport com.blog.learn.handler.BlogAccessDeniedHandler;\nimport com.blog.learn.handler.BlogAuthenticationEntryPoint;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n\n##类文件注释（在 define.vm 中自定义的宏）\n#classComment(\"Servlet环境下SpringSecurity安全配置\")    \n@Configuration\n@EnableGlobalMethodSecurity(prePostEnabled = true)\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    \n    @Autowired\n    private JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                .csrf().disable()\n                .cors()\n                .and()\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and()\n                .addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class)\n                .authorizeRequests()\n                .mvcMatchers(\"/user/**\").permitAll()\n                .anyRequest().authenticated();\n        // 配置异常处理：第一个是--鉴权异常处理、第二个是--认证异常处理\n        http.exceptionHandling()\n                .accessDeniedHandler(blogAccessDeniedHandler())\n                .authenticationEntryPoint(blogAuthenticationEntryPoint());\n    }\n\n    @Bean\n    @Override\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder(){\n        return new BCryptPasswordEncoder();\n    }\n\n    @Bean\n    public BlogAuthenticationEntryPoint blogAuthenticationEntryPoint(){\n        return new BlogAuthenticationEntryPoint();\n    }\n\n    @Bean\n    public BlogAccessDeniedHandler blogAccessDeniedHandler() {\n        return new BlogAccessDeniedHandler();\n    }\n    \n}\n\n// 关于 Servlet Web 应用程序的开发配置参考 SpringSecurity 官方文档： https://docs.spring.io/spring-security/reference/servlet/index.html\n// 关于 Reactive Web 应用程序的开发配置参考 SpringSecurity 官方文档： https://docs.spring.io/spring-security/reference/reactive/index.html\n// 关于 SpringBoot 应用程序使用 oauth2 进行第三方授权登录配置参考 SpringSecurity 官方文档： https://docs.spring.io/spring-security/reference/servlet/oauth2/index.html#oauth2-client\n\n\n\n // 笔记1： 凡是在springsecurity的认证和授权过程中抛出的异常，不论是我们认为抛出的异常还是走源码过程抛出的异常都会被springsecurity过滤器链中的ExceptionTranslationFilter异常处理的过滤器捕获\n // 并调用相应的接口方法进行异常处理，所以会导致这些异常的响应结果和我们自定义的响应结果不一致的情况，为了保证给前端的响应结果的一致性，我们有必要对相应的接口\n // 进行自定义的实现，以此来保证响应结果的统一性。同时在完成自定义处理之后，我们必须将实现注册成Bean，并将他们加入到springsecurity过滤环节的对应节点，\n // 也就是在HttpSecurity对象的对应节点进行配置，以此确保自定义实现的组件能够生效。相应接口有：认证失败处理AuthenticationEntryPoint、鉴权失败处理AccessDeniedHandl\n // 笔记2：  自从springsecurity-2.7.X版本开始，官方将废弃WebSecurityConfigurerAdapter这个springsecurity的适配器类，转而推荐使用向容器注入SecurityFilterChain\n // 安全过滤器链的方法配置springsecuri\n // 笔记3：  spring官方推荐使用构造函数的方式完成依赖注入，相应的我们可以使用lombok的相应注解完成，在开发过程中应当减少使用像@Autowired、@Resource的\n // 笔记4： 在我们对springsecurity进行配置时，如果我们不对HttpSecurity对象配置formLogin属性的话，则在过滤器链中将不会存在UsernamePasswordAuthenticationFilter过滤器\n // 原因是在springsecurity的默认配置中为HttpSecurity对象配置了formLogin属性，在该属性中配置了一个默认的登陆页面，同时new了一个UsernamePasswordAuthenticationFilter放了容器\n // 但如果我们自定义配置springsecurity时没有配置formLogin属性则不会走UsernamePasswordAuthenticationFilter这一套的过滤器逻辑。所以，对于认证和授权的实现方案，我们可以总结为两套，\n // 一套是，走我们自定义的过滤器并没有配置formLogin属性的认证方案；另一套是，走springsecurity默认的通过走UsernamePasswordAuthenticationFilter的这一套方案，走这套方案需要我们\n // 在对springsecurity进行自定配置是为HttpSecurity对象配置formLogin属性，此外，我们还可以对这套方案中的一些流程处理进行自定义实现，比如自定义实现AuthenticationSuccessHandler\n // AuthenticationFailureHandler等一些关键性流程的自我定制化实现，以此来更好的完成我们的认证授权。此外、如果我们也想对登出操作进行自定义的话，我们同理可以对HttpSecurity对象配置logout属性\n // 然后自定义实现LogoutSuccessHandler"
      }, {
        "name" : "JwtAuthenticationTokenFilter.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/filter\", \"JwtAuthenticationTokenFilter.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"filter\")\n\nimport com.blog.learn.utils.JwtTokenUtil;\nimport com.blog.learn.vo.UserInfo;\nimport lombok.AllArgsConstructor;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n##类文件注释（在 define.vm 中自定义的宏）\n#classComment(\"JWT Token 认证处理过滤器\")    \n@Component\n@AllArgsConstructor\npublic class JwtAuthenticationTokenFilter extends OncePerRequestFilter {\n    \n    private RedisTemplate<String,Object> redisTemplate;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        String token = request.getHeader(\"token\");\n        if (StringUtils.isBlank(token)) {\n            // 如果请求头没有token，则直接放行\n            filterChain.doFilter(request, response);\n            // 此处return是在响应时避免继续向下执行\n            return;\n        }\n        String userId = JwtTokenUtil.parseToken(token);\n        UserInfo userInfo = (UserInfo) redisTemplate.opsForValue().get(userId);\n        if (Objects.nonNull(userInfo)){\n            Set<String> permissions = userInfo.getPermissions();\n            List<GrantedAuthority> grantedAuthorities;\n            if (CollectionUtils.isEmpty(permissions)) {\n                grantedAuthorities = new ArrayList<>();\n            }else{\n                grantedAuthorities = permissions.stream().map(SimpleGrantedAuthority::new).collect(Collectors.toList());\n            }\n            UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(userInfo, null, grantedAuthorities);\n            SecurityContextHolder.getContext().setAuthentication(authenticationToken);\n            // 不论查reds有没有值,操作之后都要放行\n            filterChain.doFilter(request, response);\n        }else{\n            throw new RuntimeException(\"用户不存在\");\n        }\n    }\n    \n}"
      }, {
        "name" : "MysqlDdl.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/handler\",\"MysqlDdlHandler.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"handler\")\n\n##类文件注释（在 define.vm 中自定义的宏）\n#classComment(\"数据库表结构的自动维护\")    \n@Component\npublic class MysqlDdl implements IDdl {\n\n\n    /**\n     * 在MyBatis-Plus的3.5.3+版本中，引入了一项强大的功能：数据库DDL（数据定义语言）表结构的自动维护。\n     * 这一功能通过执行SQL脚本来实现数据库模式的初始化和升级，与传统的flyway工具相比，它不仅支持分表库，还能够控制代码执行SQL脚本的过程。 \n     * 使用参考 Mybatis-Plus 官网： https://baomidou.com/guides/auto-ddl/\n     * 获取要执行的SQL脚本文件列表\n     */\n    @Override\n    public List<String> getSqlFiles() {\n        return Arrays.asList(\n                \"db/tag-schema.sql\",\n                // 从`3.5.3.2`版本开始，支持执行存储过程。在文件名后追加`#$$`，其中`$$`是自定义的完整SQL分隔符。\n                // 存储过程脚本以`END`结尾，并追加分隔符`END;$$`表示脚本结束。\n                \"db/procedure.sql#$$\",\n                \"D:\\\\db\\\\tag-data.sql\"\n        );\n    }\n    \n    // 切换到mysql从库，执行SQL脚本\n// ShardingKey.change(\"mysqlt2\");\n// ddlScript.run(new StringReader(\"DELETE FROM user;\\n\" +\n        // \"INSERT INTO user (id, username, password, sex, email) VALUES\\n\" +\n        // \"(20, 'Duo', '123456', 0, 'Duo@baomidou.com');\"));\n        \n}\n"
      }, {
        "name" : "UserInfoDTO.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/dto\", \"UserInfoDTO.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"dto\")\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.experimental.Accessors;\n\nimport java.io.Serial;\nimport java.io.Serializable;\nimport java.util.Set;\n\n##类文件注释（在 define.vm 中自定义的宏）\n#classComment(\"数据传输对象\")   \n@Getter\n@Setter\n@Accessors(chain = true)\npublic class UserInfoDTO implements Serializable {\n    @Serial\n    private static final long serialVersionUID = $!tool.serial();\n    \n    @NotNull(message = \"ID 不能为空\")\n    @Min(value = 1, message = \"ID 必须大于 0\")\n    private Long id;\n\n    @NotBlank(message = \"名称不能为空或空白\")\n    @Size(min = 3, max = 30, message = \"名称长度必须介于 3 到 30 个字符之间\")\n    private String name;\n\n    @Email(message = \"电子邮件格式无效\")\n    private String email;\n\n    @NotBlank(message = \"电话号码不能为空\")\n    @Pattern(regexp = \"\\\\d{3}-\\\\d{3}-\\\\d{4}\", message = \"电话号码必须采用以下格式 ###-###-####\")\n    private String phoneNumber;\n\n    @Min(value = 18, message = \"年龄必须年满 18 岁\")\n    @Max(value = 100, message = \"年龄不能超过 100 岁\")\n    private Integer age;\n\n    @Positive(message = \"数量必须为正数\")\n    private int quantity;\n\n    @DecimalMin(value = \"10.0\", message = \"价格必须至少为 10.0 元\")\n    @DecimalMax(value = \"100.0\", message = \"价格不能超过 100.0 元\")\n    private BigDecimal price;\n\n    @Past(message = \"出生日期必须为过去日期\")\n    private LocalDate birthdate;\n\n    @Future(message = \"日期必须为未来日期\")\n    private LocalDate futureDate;\n\n    @URL(message = \"URL 格式无效\")\n    private String website;\n\n    @CreditCardNumber(message = \"无效的信用卡号格式\")\n    private String creditCardNumber;\n\n    @NotNull(message = \"性别不能为空\")\n    private Gender gender;\n\n    public enum Gender {\n        MALE, FEMALE, OTHER\n    }\n\n}\n\n// DTO（Data Transfer Object）是一种输入数据对象，用于在应用程序中传递数据。常作为参数传递。\n// 关于数据校验的使用参考 SpringBoot 官方文档： https://docs.spring.io/spring-boot/reference/io/validation.html\n\n// 减少网络传输负担：DTO通常用于远程调用或微服务间通信。它们可以只包含真正需要传输的数据，从而减少网络传输的负担，提高系统性能。\n// 防止敏感数据泄露：使用DTO和VO可以控制哪些数据暴露给外部或前端，从而减少敏感数据泄露的风险。\n// 数据隔离：通过DTO和VO，可以确保只有经过验证的数据才能被处理，从而增强系统的安全性。\n\n\n// 在 MVC 模式中，DTO 通常用于处理客户端请求的数据，比如用户输入、表单数据等。前端提交给后端的数据，通常都是 DTO。\n// 而在微服务架构中，DTO 通常用于服务间通信，比如服务 A 调用服务 B 的接口，服务 B 接收到请求后，会将请求参数封装成 DTO 并返回给服务 A。\n// 因此，DTO 在微服务架构中扮演着重要的角色，它可以有效地减少网络传输的负担，提高系统性能，并防止敏感数据泄露。\n\n// 总结：DTO 使用场景主要有两个，一个是 MVC 模式，另一个是微服务架构。\n// 在 MVC 模式中，DTO 通常用于处理客户端请求的数据，比如用户输入、表单数据等。\n// 在微服务架构中，DTO 通常用于服务间通信（OpenFeign），比如服务 A 调用服务 B 的接口，服务 B 接收到请求后，会将请求参数封装成 DTO 并返回给服务 A。\n"
      } ]
    },
    "spring-data-mongodb" : {
      "name" : "spring-data-mongodb",
      "elementList" : [ {
        "name" : "controller.java.vm",
        "code" : "##导入宏定义、设置包名、类名、文件名##导入宏定义\n$!{define.vm}\n#setPackageSuffix(\"controller\")\n#setTableSuffix(\"Controller\")\n#save(\"/controller\", \"Controller.java\")\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n##定义服务名\n#set($serviceSortType = $!tool.append($!tableInfo.name, \"Service\"))\n#set($serviceType = $!tool.append($!tableInfo.savePackageName, \".service.\", $serviceSortType))\n#set($serviceVarName = $!tool.firstLowerCase($serviceSortType))\n\n#set($entityShortType = $!tableInfo.name)\n#set($entityType = $!tableInfo.psiClassObj.getQualifiedName())\n#set($entityVarName = $!tool.firstLowerCase($!tableInfo.name))\n#set($pkType = $!pk.type)\n\nimport $pkType;\nimport $entityType;\nimport $serviceType;\nimport lombok.AllArgsConstructor;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n/**\n * $!{tableInfo.comment}控制层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@RestController\n@RequestMapping(\"/$!tool.firstLowerCase($!tableInfo.name)\")\n@AllArgsConstructor\npublic class $!{tableName} {\n\n\tprivate $serviceSortType $serviceVarName;\n\n\t/**\n\t * 获取$!{tableInfo.comment}列表(分页)\n\t */\n\t@GetMapping(\"/list\")\n\tpublic Page<$entityShortType> list(Pageable page) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * 获取$!{tableInfo.comment}\n\t */\n\t@GetMapping(\"/get\")\n\tpublic $entityShortType get($!pk.shortType id) {\n\t\treturn ${serviceVarName}.findById(id);\n\t}\n\n\t/**\n\t * 添加$!{tableInfo.comment}\n\t */\n\t@PostMapping(\"/add\")\n\tpublic void add(@RequestBody $entityShortType $entityVarName) {\n\t\t${serviceVarName}.save($entityVarName);\n\t}\n\n\n\t/**\n\t * 修改$!{tableInfo.comment}\n\t */\n\t@PostMapping(\"/update\")\n\tpublic void update(@RequestBody $entityShortType $entityVarName) {\n\t\t${serviceVarName}.save($entityVarName);\n\t}\n\n\t/**\n\t * 删除$!{tableInfo.comment}\n\t */\n\t@PostMapping(\"/delete\")\n\tpublic void delete($!pk.shortType id) {\n\t\t${serviceVarName}.deleteById(id);\n\t}\n\n}\n"
      }, {
        "name" : "entity.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/entity\", \".java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"entity\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport java.io.Serializable;\n\n##使用宏定义实现类注释信息\n#tableComment(\"实体类\")\npublic class $!{tableInfo.name} implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n##使用宏定义实现get,set方法\n#getSetMethod($column)\n#end\n\n}\n"
      }, {
        "name" : "repository.java.vm",
        "code" : "##导入宏定义、设置包名、类名、文件名##导入宏定义\n$!{define.vm}\n#setPackageSuffix(\"repository\")\n#setTableSuffix(\"Repository\")\n#save(\"/repository\", \"Repository.java\")\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n##实体类名、主键类名\n#set($entityShortType = $!tableInfo.name)\n#set($entityType = $!tableInfo.psiClassObj.getQualifiedName())\n#set($pkShortType = $!pk.shortType)\n#set($pkType = $!pk.type)\n\nimport $pkType;\nimport $entityType;\nimport org.springframework.data.mongodb.repository.MongoRepository;\n\n\n/**\n * $!{tableInfo.comment}持久层\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} extends MongoRepository<$entityShortType, $pkShortType> {\n\n}\n"
      }, {
        "name" : "service.java.vm",
        "code" : "##导入宏定义、设置包名、类名、文件名##导入宏定义\n$!{define.vm}\n#setPackageSuffix(\"service\")\n#setTableSuffix(\"Service\")\n#save(\"/service\", \"Service.java\")\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n##实体类名、主键类名\n#set($entityShortType = $!tableInfo.name)\n#set($entityType = $!tableInfo.psiClassObj.getQualifiedName())\n#set($entityVarName = $!tool.firstLowerCase($!tableInfo.name))\n#set($pkShortType = $!pk.shortType)\n#set($pkType = $!pk.type)\n\nimport $pkType;\nimport $entityType;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport java.util.Collection;\nimport java.util.List;\n\n\n/**\n * $!{tableInfo.comment}业务层\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} {\n\n    void save($entityShortType $entityVarName);\n\n    void deleteById($pkShortType id);\n\n    $entityShortType findById($pkShortType id);\n\n    List<$entityShortType> findById(Collection<$pkShortType> ids);\n\n    Page<$entityShortType> list(Pageable page);\n\n}\n"
      }, {
        "name" : "serviceImpl.java.vm",
        "code" : "##导入宏定义、设置包名、类名、文件名\n$!{define.vm}\n#setPackageSuffix(\"service.impl\")\n#setTableSuffix(\"ServiceImpl\")\n#save(\"/service/impl\", \"ServiceImpl.java\")\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n##业务层类名、持久层类名、实体名\n#set($serviceSortType = $!tool.append($!tableInfo.name, \"Service\"))\n#set($serviceType = $!tool.append($!tableInfo.savePackageName, \".service.\", $serviceSortType))\n#set($repositorySortType = $!tool.append($!tableInfo.name, \"Repository\"))\n#set($repositoryType = $!tool.append($!tableInfo.savePackageName, \".repository.\", $repositorySortType))\n#set($repositoryVarName = $!tool.firstLowerCase($!repositorySortType))\n#set($entityShortType = $!tableInfo.name)\n#set($entityType = $!tableInfo.psiClassObj.getQualifiedName())\n#set($entityVarName = $!tool.firstLowerCase($!tableInfo.name))\n#set($pkShortType = $!pk.shortType)\n#set($pkType = $!pk.type)\n\nimport $pkType;\nimport $entityType;\nimport $serviceType;\nimport $repositoryType;\nimport org.springframework.stereotype.Service;\nimport javax.annotation.Resource;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.StreamSupport;\n\n\n/**\n * $!{tableInfo.comment}业务层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Service\npublic class $!{tableName} implements $!serviceSortType {\n\n\t@Resource\n    private $repositorySortType $repositoryVarName;\n\n    @Override\n    public void save($entityShortType $entityVarName) {\n        $!{repositoryVarName}.save($entityVarName);\n    }\n\n    @Override\n    public void deleteById($pkShortType id) {\n        $!{repositoryVarName}.delete(id);\n    }\n\n    @Override\n    public $entityShortType findById($pkShortType id) {\n        return $!{repositoryVarName}.findOne(id);\n    }\n\n    @Override\n    public List<$entityShortType> findById(Collection<$pkShortType> ids) {\n        Iterable<$entityShortType> iterable = $!{repositoryVarName}.findAll(ids);\n        return StreamSupport.stream(iterable.spliterator(), false)\n                .collect(Collectors.toList());\n    }\n\n    @Override\n    public Page<$entityShortType> list(Pageable page) {\n        return $!{repositoryVarName}.findAll(page);\n    }\n\n}\n"
      } ]
    },
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "name" : "controller.java.vm",
        "code" : "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Controller\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/controller\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.annotation.Resource;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表控制层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@RestController\n@RequestMapping(\"$!tool.firstLowerCase($tableInfo.name)\")\npublic class $!{tableName} {\n    /**\n     * 服务对象\n     */\n    @Resource\n    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;\n\n    /**\n     * 分页查询\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 筛选条件\n     * @param pageRequest      分页对象\n     * @return 查询结果\n     */\n    @GetMapping\n    public ResponseEntity<Page<$!{tableInfo.name}>> queryByPage($!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}, PageRequest pageRequest) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.queryByPage($!{tool.firstLowerCase($tableInfo.name)}, pageRequest));\n    }\n\n    /**\n     * 通过主键查询单条数据\n     *\n     * @param id 主键\n     * @return 单条数据\n     */\n    @GetMapping(\"{id}\")\n    public ResponseEntity<$!{tableInfo.name}> queryById(@PathVariable(\"id\") $!pk.shortType id) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.queryById(id));\n    }\n\n    /**\n     * 新增数据\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 实体\n     * @return 新增结果\n     */\n    @PostMapping\n    public ResponseEntity<$!{tableInfo.name}> add($!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.insert($!{tool.firstLowerCase($tableInfo.name)}));\n    }\n\n    /**\n     * 编辑数据\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 实体\n     * @return 编辑结果\n     */\n    @PutMapping\n    public ResponseEntity<$!{tableInfo.name}> edit($!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.update($!{tool.firstLowerCase($tableInfo.name)}));\n    }\n\n    /**\n     * 删除数据\n     *\n     * @param id 主键\n     * @return 删除是否成功\n     */\n    @DeleteMapping\n    public ResponseEntity<Boolean> deleteById($!pk.shortType id) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.deleteById(id));\n    }\n\n}\n"
      }, {
        "name" : "dao.java.vm",
        "code" : "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Dao\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/dao\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dao;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport org.apache.ibatis.annotations.Param;\nimport org.springframework.data.domain.Pageable;\nimport java.util.List;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表数据库访问层\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} {\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);\n\n    /**\n     * 查询指定行数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 查询条件\n     * @param pageable         分页对象\n     * @return 对象列表\n     */\n    List<$!{tableInfo.name}> queryAllByLimit($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}), @Param(\"pageable\") Pageable pageable);\n\n    /**\n     * 统计总行数\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 查询条件\n     * @return 总行数\n     */\n    long count($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 新增数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 影响行数\n     */\n    int insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 批量新增数据（MyBatis原生foreach方法）\n     *\n     * @param entities List<$!{tableInfo.name}> 实例对象列表\n     * @return 影响行数\n     */\n    int insertBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n\n    /**\n     * 批量新增或按主键更新数据（MyBatis原生foreach方法）\n     *\n     * @param entities List<$!{tableInfo.name}> 实例对象列表\n     * @return 影响行数\n     * @throws org.springframework.jdbc.BadSqlGrammarException 入参是空List的时候会抛SQL语句错误的异常，请自行校验入参\n     */\n    int insertOrUpdateBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n\n    /**\n     * 修改数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 影响行数\n     */\n    int update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 通过主键删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 影响行数\n     */\n    int deleteById($!pk.shortType $!pk.name);\n\n}\n"
      }, {
        "name" : "debug.json.vm",
        "code" : "// 禁止将生成结果写入到文件\n$!callback.setWriteFile(false)\n\n//调试表原始对象\n$!tool.debug($tableInfo.obj)\n\n//调试列原始对象\n$!tool.debug($tableInfo.fullColumn.get(0).obj)\n\n//调试列原始列类型\n$!tool.debug($tableInfo.fullColumn.get(0).obj.dataType)\n\n//获取原始列类型中的字段\nsqlType = $!tool.getField($tableInfo.fullColumn.get(0).obj.dataType, \"typeName\")\n\n//执行原始列类型中的方法\nsqlTypeLen = $!tableInfo.fullColumn.get(0).obj.dataType.getLength()\n"
      }, {
        "name" : "entity.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/entity\", \".java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"entity\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport java.io.Serializable;\n\n##使用宏定义实现类注释信息\n#tableComment(\"实体类\")\npublic class $!{tableInfo.name} implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n##使用宏定义实现get,set方法\n#getSetMethod($column)\n#end\n\n}\n"
      }, {
        "name" : "mapper.xml.vm",
        "code" : "##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Dao.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao\">\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\" id=\"$!{tableInfo.name}Map\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n\n    <!--查询单个-->\n    <select id=\"queryById\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        where $!pk.obj.name = #{$!pk.name}\n    </select>\n\n    <!--查询指定行数据-->\n    <select id=\"queryAllByLimit\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        <where>\n#foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n#end\n        </where>\n        limit #{pageable.offset}, #{pageable.pageSize}\n    </select>\n\n    <!--统计总行数-->\n    <select id=\"count\" resultType=\"java.lang.Long\">\n        select count(1)\n        from $!tableInfo.obj.name\n        <where>\n#foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n#end\n        </where>\n    </select>\n\n    <!--新增所有列-->\n    <insert id=\"insert\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values (#foreach($column in $tableInfo.otherColumn)#{$!{column.name}}#if($velocityHasNext), #end#end)\n    </insert>\n\n    <insert id=\"insertBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n        (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n    </insert>\n\n    <insert id=\"insertOrUpdateBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n            (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n        on duplicate key update\n        #foreach($column in $tableInfo.otherColumn)$!column.obj.name = values($!column.obj.name)#if($velocityHasNext),\n        #end#end\n\n    </insert>\n\n    <!--通过主键修改数据-->\n    <update id=\"update\">\n        update $!{tableInfo.obj.name}\n        <set>\n#foreach($column in $tableInfo.otherColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                $!column.obj.name = #{$!column.name},\n            </if>\n#end\n        </set>\n        where $!pk.obj.name = #{$!pk.name}\n    </update>\n\n    <!--通过主键删除-->\n    <delete id=\"deleteById\">\n        delete from $!{tableInfo.obj.name} where $!pk.obj.name = #{$!pk.name}\n    </delete>\n\n</mapper>\n"
      }, {
        "name" : "service.java.vm",
        "code" : "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务接口\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} {\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);\n\n    /**\n     * 分页查询\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 筛选条件\n     * @param pageRequest      分页对象\n     * @return 查询结果\n     */\n    Page<$!{tableInfo.name}> queryByPage($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}), PageRequest pageRequest);\n\n    /**\n     * 新增数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    $!{tableInfo.name} insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 修改数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 通过主键删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 是否成功\n     */\n    boolean deleteById($!pk.shortType $!pk.name);\n\n}"
      }, {
        "name" : "serviceImpl.java.vm",
        "code" : "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"ServiceImpl\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service/impl\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.stereotype.Service;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageImpl;\nimport org.springframework.data.domain.PageRequest;\n\nimport javax.annotation.Resource;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务实现类\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Service(\"$!tool.firstLowerCase($!{tableInfo.name})Service\")\npublic class $!{tableName} implements $!{tableInfo.name}Service {\n    @Resource\n    private $!{tableInfo.name}Dao $!tool.firstLowerCase($!{tableInfo.name})Dao;\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    @Override\n    public $!{tableInfo.name} queryById($!pk.shortType $!pk.name) {\n        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.queryById($!pk.name);\n    }\n\n    /**\n     * 分页查询\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 筛选条件\n     * @param pageRequest      分页对象\n     * @return 查询结果\n     */\n    @Override\n    public Page<$!{tableInfo.name}> queryByPage($!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}, PageRequest pageRequest) {\n        long total = this.$!{tool.firstLowerCase($tableInfo.name)}Dao.count($!{tool.firstLowerCase($tableInfo.name)});\n        return new PageImpl<>(this.$!{tool.firstLowerCase($tableInfo.name)}Dao.queryAllByLimit($!{tool.firstLowerCase($tableInfo.name)}, pageRequest), pageRequest, total);\n    }\n\n    /**\n     * 新增数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    @Override\n    public $!{tableInfo.name} insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.insert($!tool.firstLowerCase($!{tableInfo.name}));\n        return $!tool.firstLowerCase($!{tableInfo.name});\n    }\n\n    /**\n     * 修改数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    @Override\n    public $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.update($!tool.firstLowerCase($!{tableInfo.name}));\n        return this.queryById($!{tool.firstLowerCase($!{tableInfo.name})}.get$!tool.firstUpperCase($pk.name)());\n    }\n\n    /**\n     * 通过主键删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 是否成功\n     */\n    @Override\n    public boolean deleteById($!pk.shortType $!pk.name) {\n        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.deleteById($!pk.name) > 0;\n    }\n}"
      } ]
    }
  },
  "columnConfig" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "title" : "disable",
        "type" : "BOOLEAN",
        "selectValue" : ""
      }, {
        "title" : "support",
        "type" : "SELECT",
        "selectValue" : "add,edit,query,del,ui"
      } ]
    }
  },
  "globalConfig" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "name" : "autoImport.vm",
        "value" : "##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"
      }, {
        "name" : "define.vm",
        "value" : "##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n##定义新创建的类文件上的注释的宏定义，调用方式：#classComment(\"注释信息\")\n#macro(classComment $desc)\n/**\n * $desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n##定义新创建的类文件上的注释的宏定义，调用方式：#methodComment(\"注释信息\")\n#macro(methodComment $desc)\n/**\n * $desc\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end"
      }, {
        "name" : "init.vm",
        "value" : "##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"t_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"testCreateTime\", \"otherColumn\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)"
      }, {
        "name" : "mybatisSupport.vm",
        "value" : "##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end\n"
      } ]
    }
  }
}
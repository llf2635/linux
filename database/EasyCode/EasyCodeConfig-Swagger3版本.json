{
  "author" : "龙茶清欢",
  "version" : "1.2.6",
  "userSecure" : "",
  "currTypeMapperGroupName" : "Default",
  "currTemplateGroupName" : "MybatisPlus",
  "currColumnConfigGroupName" : "Default",
  "currGlobalConfigGroupName" : "Default",
  "typeMapper" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "matchType" : "REGEX",
        "columnType" : "varchar(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "char(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|medium|long)*text",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "decimal(\\(\\d+,\\d+\\))?",
        "javaType" : "java.lang.Double"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "integer",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|small|medium)*int(\\(\\d+\\))?",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int4",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int8",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "REGEX",
        "columnType" : "bigint(\\(\\d+\\))?",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "date",
        "javaType" : "java.util.Date"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "datetime",
        "javaType" : "java.util.Date"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "timestamp",
        "javaType" : "java.util.Date"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "time",
        "javaType" : "java.time.LocalTime"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "boolean",
        "javaType" : "java.lang.Boolean"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "tinyint unsigned",
        "javaType" : "java.util.Boolean"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int unsigned",
        "javaType" : "java.lang.Integer"
      } ]
    }
  },
  "template" : {
    "MybatisPlus" : {
      "name" : "MybatisPlus",
      "elementList" : [ {
        "name" : "controller.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Controller\")\n\n##保存文件（宏定义）\n#save(\"/controller\", \"Controller.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"controller\")\n\n##定义服务名\n#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \"Service\"))\n##定义实体对象名\n#set($entityName = $!tool.firstLowerCase($!tableInfo.name))\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport $!{tableInfo.savePackageName}.util.R;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.web.bind.annotation.*;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\n\nimport java.util.List;\n\n##表注释（宏定义）\n#tableComment(\"表控制层\")\n@RestController\n@RequestMapping(\"/$!tool.firstLowerCase($!tableInfo.name)\")\n@RequiredArgsConstructor\n@Tag(name = \"$!{tableInfo.comment}管理\", description = \"$!{tableInfo.comment}管理\")\npublic class $!{tableName} {\n  \n    private final $!{tableInfo.name}Service $!{serviceName};\n\n    /**\n     * 分页查询所有数据\n     *\n     * @param page 分页对象\n     * @param $!entityName 查询实体\n     * @return 所有数据\n     */\n    @GetMapping(\"/findByPage\")\n    @Operation(name = \"通过分页查询\")\n    public R<Object> findByPage(Page<$!{tableInfo.name}> page, $!tableInfo.name $!entityName) {\n        return R.ok($!{serviceName}.page(page, new QueryWrapper<>($!entityName)));\n    }\n\n    /**\n     * 通过主键查询单条数据\n     *\n     * @param id 主键\n     * @return 单条数据\n     */\n    @GetMapping(\"/findById/{id}\")\n    @Operation(name = \"通过ID查询\")\n    public R<Object> findById(@PathVariable Long id) {\n        return R.ok($!{serviceName}.getById(id));\n    }\n\n    /**\n     * 新增数据\n     *\n     * @param $!entityName 实体对象\n     * @return 新增结果\n     */\n    @PostMapping(\"/insert\")\n    @Operation(name = \"新增\")\n    public R<Object> insert(@RequestBody $!tableInfo.name $!entityName) {\n        return R.ok($!{serviceName}.save($!entityName));\n    }\n\n    /**\n     * 修改数据\n     *\n     * @param $!entityName 实体对象\n     * @return 修改结果\n     */\n    @PutMapping(\"/update\")\n    @Operation(name = \"更新\")\n    public R<Object> update(@RequestBody $!tableInfo.name $!entityName) {\n        return R.ok($!{serviceName}.updateById($!entityName));\n    }\n\n    /**\n     * 删除数据\n     *\n     * @param idList 主键结合\n     * @return 删除结果\n     */\n    @DeleteMapping(\"/delete\")\n    @Operation(name = \"删除\")\n    public R<Object> delete(@RequestParam(\"idList\") List<Long> idList) {\n        return R.ok($!{serviceName}.removeByIds(idList));\n    }\n    \n}\n"
      }, {
        "name" : "service.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Service\")\n\n##保存文件（宏定义）\n#save(\"/service\", \"Service.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service\")\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n##表注释（宏定义）\n#tableComment(\"表服务接口\")\npublic interface $!{tableName} extends IService<$!tableInfo.name> {\n\n}\n"
      }, {
        "name" : "serviceImpl.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"ServiceImpl\")\n\n##保存文件（宏定义）\n#save(\"/service/impl\", \"ServiceImpl.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service.impl\")\n\nimport $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.stereotype.Service;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n\n##表注释（宏定义）\n#tableComment(\"表服务实现类\")\n@Service(\"$!tool.firstLowerCase($tableInfo.name)Service\")\npublic class $!{tableName} extends ServiceImpl<$!{tableInfo.name}Mapper, $!{tableInfo.name}> implements $!{tableInfo.name}Service {\n\n}\n"
      }, {
        "name" : "mapper.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Mapper\")\n\n##保存文件（宏定义）\n#save(\"/mapper\", \"Mapper.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"mapper\")\n\nimport org.apache.ibatis.annotations.Mapper;\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n##表注释（宏定义）\n#tableComment(\"表数据库访问层\")\n@Mapper\npublic interface $!{tableName} extends BaseMapper<$!tableInfo.name> {\n\n}\n"
      }, {
        "name" : "mapper.xml.vm",
        "code" : "##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Mapper.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper\">\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\" id=\"$!{tableInfo.name}Map\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n\n    <!--查询单个-->\n    <select id=\"queryById\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        where $!pk.obj.name = #{$!pk.name}\n    </select>\n\n    <!--查询指定行数据-->\n    <select id=\"queryAllByLimit\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        <where>\n#foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n#end\n        </where>\n        limit #{pageable.offset}, #{pageable.pageSize}\n    </select>\n\n    <!--统计总行数-->\n    <select id=\"count\" resultType=\"java.lang.Long\">\n        select count(1)\n        from $!tableInfo.obj.name\n        <where>\n#foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n#end\n        </where>\n    </select>\n\n    <!--新增所有列-->\n    <insert id=\"insert\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values (#foreach($column in $tableInfo.otherColumn)#{$!{column.name}}#if($velocityHasNext), #end#end)\n    </insert>\n\n    <insert id=\"insertBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n        (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n    </insert>\n\n    <insert id=\"insertOrUpdateBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n            (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n        on duplicate key update\n        #foreach($column in $tableInfo.otherColumn)$!column.obj.name = values($!column.obj.name)#if($velocityHasNext),\n        #end#end\n\n    </insert>\n\n    <!--通过主键修改数据-->\n    <update id=\"update\">\n        update $!{tableInfo.obj.name}\n        <set>\n#foreach($column in $tableInfo.otherColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                $!column.obj.name = #{$!column.name},\n            </if>\n#end\n        </set>\n        where $!pk.obj.name = #{$!pk.name}\n    </update>\n\n    <!--通过主键删除-->\n    <delete id=\"deleteById\">\n        delete from $!{tableInfo.obj.name} where $!pk.obj.name = #{$!pk.name}\n    </delete>\n\n</mapper>\n"
      }, {
        "name" : "entity.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##保存文件（宏定义）\n#save(\"/entity\", \".java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"entity\")\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.TableName;\nimport java.io.Serializable;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n##表注释（宏定义）\n#tableComment(\"表实体类\")\n@Getter\n@Setter\n@TableName(\"$tableInfo.obj.name\")\n@Schema(name = \"$!{tableInfo.comment}实体\", description = \"$!{tableInfo.comment}映射\")\npublic class $!{tableInfo.name} implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n#foreach($column in $tableInfo.pkColumn)\n\n    @TableId(value = \"$!{column.obj.name}\" , type = IdType.AUTO)\n    @Schema(description = \"$!{column.obj.comment}\")\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n#foreach($column in $tableInfo.otherColumn)\n#if(!($column.obj.name.equals('deleted')||$column.obj.name.equals('del_flag')||$column.obj.name.equals('update_time')||$column.obj.name.equals('create_time')))\n    @TableField(value = \"$!{column.obj.name}\")\n#end\n#if($column.obj.name.equals('create_time'))\n\t@TableField(value = \"$!{column.obj.name}\" , fill = FieldFill.INSERT)\n#end\n#if($column.obj.name.equals('update_time'))\n\t@TableField(value = \"$!{column.obj.name}\" , fill = FieldFill.INSERT_UPDATE)\n#end\n#if(($column.obj.name.equals('deleted')||$column.obj.name.equals('del_flag')))\n\t@TableLogic\n#end\t\n    @Schema(description = \"$!{column.obj.comment}\")\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n    \n#end\n}\n"
      }, {
        "name" : "R.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/util\", \"R.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"util\")\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.experimental.Accessors;\nimport $!{tableInfo.savePackageName}.enums.HttpCode;\n\nimport java.io.Serializable;\n\n/**\n * 统一返回对象R\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Getter\n@Setter\n@Accessors(chain = true)\npublic class R<T> implements Serializable {\n\n    private static final long serialVersionUID= $!tool.serial();\n\n    private int code;\n\tprivate String msg;\n\tprivate T data;\n\n    public static <T> R<T> ok() {\n\t\treturn restResult(null, HttpCode.OK.getCode(), HttpCode.OK.getMsg());\n\t}\n\n\tpublic static <T> R<T> ok(T data) {\n\t\treturn restResult(data, HttpCode.OK.getCode(), HttpCode.OK.getMsg());\n\t}\n\n\tpublic static <T> R<T> ok(String msg) {\n\t\treturn restResult(null, HttpCode.OK.getCode(), msg);\n\t}\n\n\tpublic static <T> R<T> ok(T data, String msg) {\n\t\treturn restResult(data, HttpCode.OK.getCode(), msg);\n\t}\n\n\tpublic static <T> R<T> failed() {\n\t\treturn restResult(null, HttpCode.NOT_FOUND.getCode(), HttpCode.NOT_FOUND.getMsg());\n\t}\n\n\tpublic static <T> R<T> failed(String msg) {\n\t\treturn restResult(null, HttpCode.NOT_FOUND.getCode(), msg);\n\t}\n\n\tpublic static <T> R<T> failed(T data) {\n\t\treturn restResult(data, HttpCode.NOT_FOUND.getCode(), HttpCode.NOT_FOUND.getMsg());\n\t}\n\n\tpublic static <T> R<T> failed(T data, String msg) {\n\t\treturn restResult(data, HttpCode.NOT_FOUND.getCode(), msg);\n\t}\n\n\tpublic static <T> R<T> failed(T data, int code, String msg) {\n\t\treturn restResult(data, code, msg);\n\t}\n\n\tpublic static <T> R<T> restResult(T data, int code, String msg) {\n\t\tR<T> response = new R<>();\n\t\tresponse.setData(data);\n\t\tresponse.setCode(code);\n\t\tresponse.setMsg(msg);\n\t\treturn response;\n\t}\n\t\n}\n\n// @Accessors(chain = true)  允许链式赋值\n"
      }, {
        "name" : "application.yaml.vm",
        "code" : "##设置保存名称与保存位置\n$!callback.setFileName(\"application.yaml\")\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources\"))\n# 应用名称\nspring:\n  application:\n    name: demo\n  #数据库连接设置\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/demo?useUnicode=true&characterEncoding=UTF-8&allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=GMT%2B8\n    username: root\n    password: root\n    type: com.alibaba.druid.pool.DruidDataSource\n    druid:\n      # 下面为连接池的补充设置，应用到上面所有数据源中\n      # 初始化大小，最小，最大\n      initial-size: 5\n      min-idle: 5\n      max-active: 20\n      # 配置获取连接等待超时的时间\n      max-wait: 60000\n      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\n      time-between-eviction-runs-millis: 60000\n      # 配置一个连接在池中最小生存的时间，单位是毫秒\n      min-evictable-idle-time-millis: 300000\n  redis:\n    host: localhost\n    port: 6379\n    password: 123456\n    database: 0\n    jedis:\n      pool:\n        # 连接池中最小空闲连接数\n        min-idle: 0\n        # 连接池中最大空闲连接数\n        max-idle: 8\n        # 连接池中最大激活连接数，也就是最多可同时执行的连接数\n        max-active: 8\n        # 执行一次操作的最大时间\n        max-wait: 3000\n        # 定时任务，每隔一段时间扫描并释放空闲链接，如果连接数大于 max-idle 的话\n        time-between-eviction-runs: 600000\n\n# 配置日志，我们所用的sql现在是不可见的，我们希望知道他是怎么执行的，所以我们必须要查看日志！\nmybatis-plus:\n  mapper-locations: classpath*:/mapper/**/*.xml\n  global-config:\n    db-config:\n      logic-delete-field: deleted   # 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)\n      logic-delete-value: 1         # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0     # 逻辑未删除值(默认为 0)\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n\n"
      }, {
        "name" : "mybatis.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/config\", \"MybatisPlusConfig.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"config\")\n\nimport com.baomidou.mybatisplus.annotation.DbType;\nimport com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;\nimport com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * MyBatis-Plus 3.5.1 拦截器\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Configuration\n@MapperScan(\"$!{tableInfo.savePackageName}.mapper\")\npublic class MybatisPlusConfig {\n\n    /**\n     * 新版分页插件设置\n     */\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor() {\n        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();\n        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));\n        return interceptor;\n    }\n    \n}\n"
      }, {
        "name" : "handler.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/handler\",\"MybatisMetaObjectHandler.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"handler\")\n\nimport com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.ibatis.reflection.MetaObject;\nimport org.springframework.stereotype.Component;\n\nimport java.time.LocalDateTime;\n\n/**\n * MyBatis-Plus 3.5.1 处理器\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Slf4j\n@Component\npublic class MybatisPlusMetaObjectHandler implements MetaObjectHandler {\n\n    /**\n     * 插入时的填充策略\n     */\n    @Override\n    public void insertFill(MetaObject metaObject) {\n        log.info(\"mybatis plus metadata handler start insert fill\");\n        this.setFieldValByName(\"createTime\" , LocalDateTime.now(), metaObject);\n        this.setFieldValByName(\"updateTime\" , LocalDateTime.now(), metaObject);\n    }\n\n    /**\n     * 更新时的填充策略\n     */\n    @Override\n    public void updateFill(MetaObject metaObject) {\n        log.info(\"mybatis plus metadata handler start update fill\");\n        this.setFieldValByName(\"updateTime\" , LocalDateTime.now(), metaObject);\n    }\n    \n} "
      }, {
        "name" : "security.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/config\", \"SecurityConfig.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"config\")\n\nimport com.blog.learn.filter.JwtAuthenticationTokenFilter;\nimport com.blog.learn.handler.BlogAccessDeniedHandler;\nimport com.blog.learn.handler.BlogAuthenticationEntryPoint;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n\n@Configuration\n@EnableGlobalMethodSecurity(prePostEnabled = true)\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    private JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                .csrf().disable()\n                .cors()\n                .and()\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and()\n                .addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class)\n                .authorizeRequests()\n                .mvcMatchers(\"/user/**\").permitAll()\n                .anyRequest().authenticated();\n        // 配置异常处理：第一个是--鉴权异常处理、第二个是--认证异常处理\n        http.exceptionHandling()\n                .accessDeniedHandler(blogAccessDeniedHandler())\n                .authenticationEntryPoint(blogAuthenticationEntryPoint());\n    }\n\n    @Bean\n    @Override\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder(){\n        return new BCryptPasswordEncoder();\n    }\n\n    @Bean\n    public BlogAuthenticationEntryPoint blogAuthenticationEntryPoint(){\n        return new BlogAuthenticationEntryPoint();\n    }\n\n    @Bean\n    public BlogAccessDeniedHandler blogAccessDeniedHandler() {\n        return new BlogAccessDeniedHandler();\n    }\n\n\n    // 笔记1： 凡是在springsecurity的认证和授权过程中抛出的异常，不论是我们认为抛出的异常还是走源码过程抛出的异常都会被springsecurity过滤器链中的ExceptionTranslationFilter异常处理的过滤器捕获\n    // 并调用相应的接口方法进行异常处理，所以会导致这些异常的响应结果和我们自定义的响应结果不一致的情况，为了保证给前端的响应结果的一致性，我们有必要对相应的接口\n    // 进行自定义的实现，以此来保证响应结果的统一性。同时在完成自定义处理之后，我们必须将实现注册成Bean，并将他们加入到springsecurity过滤环节的对应节点，\n    // 也就是在HttpSecurity对象的对应节点进行配置，以此确保自定义实现的组件能够生效。相应接口有：认证失败处理AuthenticationEntryPoint、鉴权失败处理AccessDeniedHandler\n\n    // 笔记2：  自从springsecurity-2.7.X版本开始，官方将废弃WebSecurityConfigurerAdapter这个springsecurity的适配器类，转而推荐使用向容器注入SecurityFilterChain\n    // 安全过滤器链的方法配置springsecurity\n\n    // 笔记3：  spring官方推荐使用构造函数的方式完成依赖注入，相应的我们可以使用lombok的相应注解完成，在开发过程中应当减少使用像@Autowired、@Resource的注解\n\n    // 笔记4： 在我们对springsecurity进行配置时，如果我们不对HttpSecurity对象配置formLogin属性的话，则在过滤器链中将不会存在UsernamePasswordAuthenticationFilter过滤器\n    // 原因是在springsecurity的默认配置中为HttpSecurity对象配置了formLogin属性，在该属性中配置了一个默认的登陆页面，同时new了一个UsernamePasswordAuthenticationFilter放了容器\n    // 但如果我们自定义配置springsecurity时没有配置formLogin属性则不会走UsernamePasswordAuthenticationFilter这一套的过滤器逻辑。所以，对于认证和授权的实现方案，我们可以总结为两套，\n    // 一套是，走我们自定义的过滤器并没有配置formLogin属性的认证方案；另一套是，走springsecurity默认的通过走UsernamePasswordAuthenticationFilter的这一套方案，走这套方案需要我们\n    // 在对springsecurity进行自定配置是为HttpSecurity对象配置formLogin属性，此外，我们还可以对这套方案中的一些流程处理进行自定义实现，比如自定义实现AuthenticationSuccessHandler\n    // AuthenticationFailureHandler等一些关键性流程的自我定制化实现，以此来更好的完成我们的认证授权。此外、如果我们也想对登出操作进行自定义的话，我们同理可以对HttpSecurity对象配置logout属性\n    // 然后自定义实现LogoutSuccessHandler\n}"
      }, {
        "name" : "cors.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/config\", \"CorsConfig.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"config\")\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class CorsConfig implements WebMvcConfigurer {\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        // 设置允许跨域的路径\n        registry.addMapping(\"/**\")\n                // 设置允许携带cookie\n                .allowCredentials(true)\n                // 设置允许的域名\n                .allowedOrigins(\"*\")\n                // 设置允许跨域的方法\n                .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\")\n                // 设置允许的header属性\n                .allowedHeaders(\"*\")\n                // 设置允许的最大跨域时间\n                .maxAge(5000);\n    }\n\n    // 笔记：  此处为springboot配置了全局跨域，同时我们也有必要为springsecurity设置允许跨域，及为HttpSecurity对象设置cors\n}"
      }, {
        "name" : "redis.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/config\", \"RedisConfig.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"config\")\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.RedisSerializer;\n\n@Configuration\npublic class RedisConfig {\n\n    @Bean\n    public RedisTemplate<String,Object> redisTemplate(RedisConnectionFactory factory){\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setKeySerializer(RedisSerializer.string());\n        redisTemplate.setHashKeySerializer(RedisSerializer.string());\n        redisTemplate.setValueSerializer(RedisSerializer.json());\n        redisTemplate.setHashValueSerializer(RedisSerializer.json());\n        redisTemplate.setConnectionFactory(factory);\n        return redisTemplate;\n    }\n    \n}"
      }, {
        "name" : "filter.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/filter\", \"JwtAuthenticationTokenFilter.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"filter\")\n\nimport com.blog.learn.utils.JwtTokenUtil;\nimport com.blog.learn.vo.UserInfo;\nimport lombok.AllArgsConstructor;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n@Component\n@AllArgsConstructor\npublic class JwtAuthenticationTokenFilter extends OncePerRequestFilter {\n\n    private RedisTemplate<String,Object> redisTemplate;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        String token = request.getHeader(\"token\");\n        if (StringUtils.isBlank(token)) {\n            // 如果请求头没有token，则直接放行\n            filterChain.doFilter(request, response);\n            // 此处return是在响应时避免继续向下执行\n            return;\n        }\n        String userId = JwtTokenUtil.parseToken(token);\n        UserInfo userInfo = (UserInfo) redisTemplate.opsForValue().get(userId);\n        if (Objects.nonNull(userInfo)){\n            Set<String> permissions = userInfo.getPermissions();\n            List<GrantedAuthority> grantedAuthorities;\n            if (CollectionUtils.isEmpty(permissions)) {\n                grantedAuthorities = new ArrayList<>();\n            }else{\n                grantedAuthorities = permissions.stream().map(SimpleGrantedAuthority::new).collect(Collectors.toList());\n            }\n            UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(userInfo, null, grantedAuthorities);\n            SecurityContextHolder.getContext().setAuthentication(authenticationToken);\n            // 不论查reds有没有值,操作之后都要放行\n            filterChain.doFilter(request, response);\n        }else{\n            throw new RuntimeException(\"用户不存在\");\n        }\n    }\n}"
      }, {
        "name" : "HttpCode.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/enums\", \"HttpCode.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"enums\")\n\nimport lombok.Getter;\nimport lombok.RequiredArgsConstructor;\n\n/**\n * 统一返回对象R\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Getter\n@RequiredArgsConstructor\npublic enum HttpCode {\n\n    OK(200, \"请求正常处理完毕\"),\n    BAD_REQUEST(400, \"错误的请求\"),\n    UNAUTHORIZED(401, \"请求要求身份验证\"),\n    FORBIDDEN(403, \"服务器拒绝请求\"),\n    NOT_FOUND(404, \"服务器找不到请求的网页\"),\n    METHOD_NOT_ALLOWED(405, \"禁用请求中指定的方法\"),\n    REQUEST_TIMEOUT(408, \"服务器等候请求时发生超时\"),\n    GONE(410, \"请求的资源已永久删除\"),\n    PAYLOAD_TOO_LARGE(413, \"请求实体过大\"),\n    URI_TOO_LONG(414, \"请求的 URI 过长\"),\n    TOO_MANY_REQUESTS(429, \"请求太多\"),\n    INTERNAL_SERVER_ERROR(500, \"服务器内部错误\"),\n    BAD_GATEWAY(502, \"错误网关\"),\n    SERVICE_UNAVAILABLE(503, \"服务不可用\"),\n    GATEWAY_TIMEOUT(504, \"网关超时\");\n\n    /**\n     * 响应状态码\n     */\n    private final int code;\n\n    /**\n     * 响应信息\n     */\n    private final String msg;\n\n}\n"
      }, {
        "name" : "BeanCopyUtil.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/util\", \"BeanCopyUtil.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"util\")\n\nimport lombok.SneakyThrows;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.util.Assert;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n /**\n * Bean复制工具类\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic class BeanCopyUtil {\n\n    @SneakyThrows\n    public static <K, V> V singleCopy(K source, Class<V> target) {\n        Assert.notNull(source, \"source不能为空\");\n        Assert.notNull(target, \"target不能为空\");\n        V instance = target.getDeclaredConstructor().newInstance();\n        BeanUtils.copyProperties(source, instance);\n        return instance;\n    }\n\n    @SneakyThrows\n    public static <K, V> List<V> listCopy(List<K> source, Class<V> target) {\n        Assert.noNullElements(source, \"source不能为空,且元素也不能为空\");\n        Assert.notNull(target, \"target不能为空\");\n        List<V> targetList = new ArrayList<>();\n        source.forEach(item -> {\n            V instance;\n            try {\n                instance = target.getDeclaredConstructor().newInstance();\n                BeanUtils.copyProperties(item, instance);\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n            targetList.add(instance);\n        });\n        return targetList;\n    }\n}\n\n// Bean复制时必须保证source和target中对应的需要复制的字段数据类型和名称都一致\n"
      } ]
    }
  },
  "columnConfig" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "title" : "disable",
        "type" : "BOOLEAN",
        "selectValue" : ""
      }, {
        "title" : "support",
        "type" : "SELECT",
        "selectValue" : "add,edit,query,del,ui"
      } ]
    }
  },
  "globalConfig" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "name" : "autoImport.vm",
        "value" : "##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"
      }, {
        "name" : "define.vm",
        "value" : "##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end"
      }, {
        "name" : "init.vm",
        "value" : "##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"book_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"testCreateTime\", \"otherColumn\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)"
      }, {
        "name" : "mybatisSupport.vm",
        "value" : "##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end\n"
      } ]
    }
  }
}